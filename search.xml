<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用Python批量下载RSS源图片集</title>
      <link href="/2025/06/28/%E5%88%A9%E7%94%A8Python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDRSS%E6%BA%90%E5%9B%BE%E7%89%87%E9%9B%86/"/>
      <url>/2025/06/28/%E5%88%A9%E7%94%A8Python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDRSS%E6%BA%90%E5%9B%BE%E7%89%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h2><ul><li>请尊重网站的版权和 robots.txt 协议。</li><li>请勿将并发数设置得过高，过度频繁的请求可能会给目标服务器带来较大负担，甚至导致你IP被封禁。</li><li>本脚本仅供学习和个人收藏用途，请勿用于非法商业活动。</li></ul><h2 id="📁-文件结构"><a href="#📁-文件结构" class="headerlink" title="📁 文件结构"></a>📁 文件结构</h2><p>在运行前，请确保您的项目文件夹包含以下文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── downloader.py  # 主程序脚本</span><br><span class="line">├── config.yaml            # 配置文件</span><br><span class="line">├── requirements.txt       # Python 依赖库</span><br><span class="line">├── feeds.opml             # 你的 RSS 订阅列表 (需自行准备)</span><br><span class="line">│</span><br><span class="line">├── history.db             # (程序首次运行后自动生成) 下载历史数据库</span><br><span class="line">└── downloader_errors.log  # (出现错误后自动生成) 错误日志文件</span><br></pre></td></tr></table></figure><p><em>(可选文件)</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└── cookies.txt            # (可选) 用于模拟登录的Cookie文件</span><br></pre></td></tr></table></figure><h2 id="🐍-主程序"><a href="#🐍-主程序" class="headerlink" title="🐍 主程序"></a>🐍 主程序</h2><p><code>downloader.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import feedparser</span><br><span class="line">import aiohttp</span><br><span class="line">import aiosqlite</span><br><span class="line">import yaml</span><br><span class="line">import html</span><br><span class="line">import argparse</span><br><span class="line">import logging</span><br><span class="line">import random</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from urllib.parse import urlparse, urljoin</span><br><span class="line">from tqdm.asyncio import tqdm as aio_tqdm</span><br><span class="line">from http.cookies import SimpleCookie</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 日志设置</span><br><span class="line"># ==============================================================================</span><br><span class="line">logger = logging.getLogger(&quot;下载器&quot;)</span><br><span class="line"></span><br><span class="line">def setup_loggers(console_level=logging.INFO, error_file=&#x27;downloader_errors.log&#x27;):</span><br><span class="line">    &quot;&quot;&quot;配置控制台和文件日志记录器。&quot;&quot;&quot;</span><br><span class="line">    if logger.hasHandlers():</span><br><span class="line">        logger.handlers.clear()</span><br><span class="line">        </span><br><span class="line">    logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">    # 1. 控制台处理器</span><br><span class="line">    console_handler = logging.StreamHandler()</span><br><span class="line">    console_handler.setLevel(console_level)</span><br><span class="line">    console_formatter = logging.Formatter(</span><br><span class="line">        &#x27;%(asctime)s - %(levelname)s - [%(name)s] - %(message)s&#x27;,</span><br><span class="line">        datefmt=&#x27;%Y-%m-%d %H:%M:%S&#x27;</span><br><span class="line">    )</span><br><span class="line">    console_handler.setFormatter(console_formatter)</span><br><span class="line">    logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line">    # 2. 错误文件处理器</span><br><span class="line">    try:</span><br><span class="line">        file_handler = logging.FileHandler(error_file, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;)</span><br><span class="line">        file_handler.setLevel(logging.WARNING)</span><br><span class="line">        file_formatter = logging.Formatter(</span><br><span class="line">            &#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span><br><span class="line">        )</span><br><span class="line">        file_handler.setFormatter(file_formatter)</span><br><span class="line">        logger.addHandler(file_handler)</span><br><span class="line">        logger.info(f&quot;错误日志将记录到: &#123;os.path.abspath(error_file)&#125;&quot;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logger.error(f&quot;无法创建错误日志文件 &#123;error_file&#125;: &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 配置加载与正则表达式预编译</span><br><span class="line"># ==============================================================================</span><br><span class="line">CONFIG = &#123;&#125;</span><br><span class="line">REGEX = &#123;</span><br><span class="line">    &quot;image_file_ext&quot;: re.compile(r&#x27;\.(jpg|jpeg|png|webp|gif)$&#x27;, re.I),</span><br><span class="line">    &quot;blogspot_thumb&quot;: re.compile(r&#x27;/s\d+(-[a-z])?/&#x27;, re.I),</span><br><span class="line">    &quot;thumbnail_resize&quot;: re.compile(r&#x27;-\d+x\d+(\.\w+)$&#x27;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def load_config(path=&#x27;config.yaml&#x27;):</span><br><span class="line">    &quot;&quot;&quot;从 YAML 文件加载配置。&quot;&quot;&quot;</span><br><span class="line">    global CONFIG</span><br><span class="line">    try:</span><br><span class="line">        with open(path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">            CONFIG = yaml.safe_load(f)</span><br><span class="line">        setup_loggers(error_file=CONFIG.get(&#x27;error_log_file&#x27;, &#x27;downloader_errors.log&#x27;))</span><br><span class="line">        logger.info(&quot;成功从 %s 加载配置。&quot;, path)</span><br><span class="line">    except FileNotFoundError:</span><br><span class="line">        print(f&quot;致命错误: 未找到 &#123;path&#125; 文件，请创建它。&quot;)</span><br><span class="line">        exit(1)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;致命错误: 加载 &#123;path&#125; 出错: &#123;e&#125;&quot;)</span><br><span class="line">        exit(1)</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 数据库与Cookie (异步)</span><br><span class="line"># ==============================================================================</span><br><span class="line">class DatabaseManager:</span><br><span class="line">    &quot;&quot;&quot;异步管理用于存储下载历史的 SQLite 数据库 (基于文章标题全局去重)。&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, db_path):</span><br><span class="line">        self._db_path = db_path</span><br><span class="line">        self._conn = None</span><br><span class="line"></span><br><span class="line">    async def connect(self):</span><br><span class="line">        try:</span><br><span class="line">            self._conn = await aiosqlite.connect(self._db_path)</span><br><span class="line">            await self._conn.execute(&quot;PRAGMA journal_mode=WAL;&quot;)</span><br><span class="line">            await self._conn.execute(&quot;&quot;&quot;</span><br><span class="line">                CREATE TABLE IF NOT EXISTS download_history (</span><br><span class="line">                    post_title TEXT PRIMARY KEY,</span><br><span class="line">                    download_date TEXT NOT NULL,</span><br><span class="line">                    source_feed TEXT</span><br><span class="line">                )</span><br><span class="line">            &quot;&quot;&quot;)</span><br><span class="line">            await self._conn.commit()</span><br><span class="line">            logger.info(&quot;数据库连接成功 (全局去重模式): %s&quot;, self._db_path)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            logger.error(&quot;数据库连接失败: %s&quot;, e)</span><br><span class="line">            raise</span><br><span class="line"></span><br><span class="line">    async def is_downloaded(self, post_title):</span><br><span class="line">        &quot;&quot;&quot;检查一个文章标题是否已经被下载过。&quot;&quot;&quot;</span><br><span class="line">        async with self._conn.execute(</span><br><span class="line">            &quot;SELECT 1 FROM download_history WHERE post_title = ?&quot;,</span><br><span class="line">            (post_title,)</span><br><span class="line">        ) as cursor:</span><br><span class="line">            return await cursor.fetchone() is not None</span><br><span class="line"></span><br><span class="line">    async def add_entry(self, post_title, feed_title):</span><br><span class="line">        &quot;&quot;&quot;将一个文章标题添加到下载历史中。&quot;&quot;&quot;</span><br><span class="line">        now = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">        try:</span><br><span class="line">            await self._conn.execute(</span><br><span class="line">                &quot;INSERT OR IGNORE INTO download_history (post_title, download_date, source_feed) VALUES (?, ?, ?)&quot;,</span><br><span class="line">                (post_title, now, feed_title)</span><br><span class="line">            )</span><br><span class="line">            await self._conn.commit()</span><br><span class="line">        except Exception as e:</span><br><span class="line">            logger.error(&quot;添加记录 &#x27;%s&#x27; 到数据库失败: %s&quot;, post_title, e)</span><br><span class="line"></span><br><span class="line">    async def close(self):</span><br><span class="line">        if self._conn:</span><br><span class="line">            await self._conn.close()</span><br><span class="line">            logger.info(&quot;数据库连接已关闭。&quot;)</span><br><span class="line"></span><br><span class="line">class NetscapeCookieJar(aiohttp.CookieJar):</span><br><span class="line">    &quot;&quot;&quot;一个可以从 Netscape 格式的 cookies.txt 文件加载 cookie 的 CookieJar。&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, cookie_file=None):</span><br><span class="line">        super().__init__()</span><br><span class="line">        if cookie_file and os.path.exists(cookie_file):</span><br><span class="line">            self.load_from_file(cookie_file)</span><br><span class="line"></span><br><span class="line">    def load_from_file(self, cookie_file):</span><br><span class="line">        try:</span><br><span class="line">            with open(cookie_file, &#x27;r&#x27;) as f:</span><br><span class="line">                for line in f:</span><br><span class="line">                    if line.strip().startswith(&#x27;#&#x27;) or not line.strip():</span><br><span class="line">                        continue</span><br><span class="line">                    </span><br><span class="line">                    try:</span><br><span class="line">                        domain, _, path, secure, expires, name, value = line.strip().split(&#x27;\t&#x27;)</span><br><span class="line">                        cookie = SimpleCookie()</span><br><span class="line">                        cookie[name] = value</span><br><span class="line">                        cookie[name][&#x27;path&#x27;] = path</span><br><span class="line">                        cookie[name][&#x27;domain&#x27;] = domain</span><br><span class="line">                        cookie[name][&#x27;expires&#x27;] = int(float(expires))</span><br><span class="line">                        cookie[name][&#x27;secure&#x27;] = secure.upper() == &#x27;TRUE&#x27;</span><br><span class="line">                        self.update_cookies(cookie)</span><br><span class="line">                    except ValueError:</span><br><span class="line">                        logger.warning(f&quot;无法解析Cookie行: &#123;line.strip()&#125;&quot;)</span><br><span class="line">                logger.info(f&quot;成功从 &#123;cookie_file&#125; 加载 Cookies。&quot;)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            logger.error(f&quot;加载Cookies文件 &#123;cookie_file&#125; 失败: &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 工具函数</span><br><span class="line"># ==============================================================================</span><br><span class="line">def sanitize_folder_name(name):</span><br><span class="line">    sanitized = html.unescape(name).strip()</span><br><span class="line">    invalid_chars = r&#x27;[\\/:*?&quot;&lt;&gt;|]&#x27;</span><br><span class="line">    sanitized = re.sub(invalid_chars, &#x27;_&#x27;, sanitized)</span><br><span class="line">    return sanitized or &quot;未命名&quot;</span><br><span class="line"></span><br><span class="line">def get_full_image_url(url):</span><br><span class="line">    if &quot;bp.blogspot.com&quot; in url or &quot;googleusercontent.com&quot; in url:</span><br><span class="line">        return REGEX[&quot;blogspot_thumb&quot;].sub(&#x27;/s0/&#x27;, url)</span><br><span class="line">    if REGEX[&quot;thumbnail_resize&quot;].search(url):</span><br><span class="line">        return REGEX[&quot;thumbnail_resize&quot;].sub(r&#x27;\1&#x27;, url)</span><br><span class="line">    return url</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 网络与下载核心 (异步)</span><br><span class="line"># ==============================================================================</span><br><span class="line">async def fetch(session, url, log_prefix=&quot;&quot;):</span><br><span class="line">    for attempt in range(CONFIG.get(&#x27;max_retries&#x27;, 3) + 1):</span><br><span class="line">        try:</span><br><span class="line">            async with session.get(url, timeout=CONFIG.get(&#x27;request_timeout&#x27;, 45), headers=CONFIG.get(&#x27;request_headers&#x27;, &#123;&#125;)) as response:</span><br><span class="line">                response.raise_for_status()</span><br><span class="line">                return await response.text()</span><br><span class="line">        except (aiohttp.ClientError, asyncio.TimeoutError) as e:</span><br><span class="line">            if attempt &lt; CONFIG.get(&#x27;max_retries&#x27;, 3):</span><br><span class="line">                delay = CONFIG.get(&#x27;retry_delay&#x27;, 2) * (2 ** attempt)</span><br><span class="line">                logger.warning(&quot;%s第 %d/%d 次抓取 %s 失败。将在 %.1f 秒后重试...&quot;, log_prefix, attempt + 1, CONFIG.get(&#x27;max_retries&#x27;, 3) + 1, url, delay)</span><br><span class="line">                await asyncio.sleep(delay)</span><br><span class="line">            else:</span><br><span class="line">                logger.error(&quot;%s抓取 %s 在 %d 次重试后仍然失败: %s&quot;, log_prefix, url, CONFIG.get(&#x27;max_retries&#x27;, 3) + 1, e)</span><br><span class="line">                return None</span><br><span class="line"></span><br><span class="line">async def download_image(session, img_url, filepath, referer_url, log_prefix=&quot;&quot;):</span><br><span class="line">    &quot;&quot;&quot;异步下载单张图片，并在失败时记录详细错误。&quot;&quot;&quot;</span><br><span class="line">    full_img_url = get_full_image_url(img_url)</span><br><span class="line">    headers = CONFIG.get(&#x27;image_headers&#x27;, &#123;&#125;).copy()</span><br><span class="line">    headers[&#x27;Referer&#x27;] = referer_url</span><br><span class="line">    last_exception = None</span><br><span class="line"></span><br><span class="line">    for attempt in range(CONFIG.get(&#x27;max_retries&#x27;, 3) + 1):</span><br><span class="line">        try:</span><br><span class="line">            async with session.get(full_img_url, timeout=CONFIG.get(&#x27;request_timeout&#x27;, 45), headers=headers) as response:</span><br><span class="line">                if response.status == 404 and full_img_url != img_url:</span><br><span class="line">                    logger.warning(&quot;%s高清图URL %s 返回404，尝试原始URL: %s&quot;, log_prefix, full_img_url, img_url)</span><br><span class="line">                    return await download_image(session, img_url, filepath, referer_url, log_prefix)</span><br><span class="line">                </span><br><span class="line">                response.raise_for_status()</span><br><span class="line">                </span><br><span class="line">                content = await response.read()</span><br><span class="line">                os.makedirs(os.path.dirname(filepath), exist_ok=True)</span><br><span class="line">                with open(filepath, &#x27;wb&#x27;) as f:</span><br><span class="line">                    f.write(content)</span><br><span class="line">                return True, os.path.basename(filepath)</span><br><span class="line"></span><br><span class="line">        except (aiohttp.ClientError, asyncio.TimeoutError) as e:</span><br><span class="line">            last_exception = e</span><br><span class="line">            if attempt &lt; CONFIG.get(&#x27;max_retries&#x27;, 3):</span><br><span class="line">                delay = CONFIG.get(&#x27;retry_delay&#x27;, 5) * (2 ** attempt)</span><br><span class="line">                await asyncio.sleep(delay)</span><br><span class="line">            else:</span><br><span class="line">                # 最终失败时记录详细错误</span><br><span class="line">                error_message = f&quot;重试 &#123;CONFIG.get(&#x27;max_retries&#x27;, 3) + 1&#125; 次后失败。URL: &#123;img_url&#125;&quot;</span><br><span class="line">                logger.error(&quot;%s%s, 底层错误: %s&quot;, log_prefix, error_message, last_exception, exc_info=False)</span><br><span class="line">                return False, str(last_exception)</span><br><span class="line">    return False, &quot;已达最大重试次数&quot;</span><br><span class="line"></span><br><span class="line">async def fetch_paginated_content(session, url, log_prefix=&quot;&quot;):</span><br><span class="line">    &quot;&quot;&quot;异步获取一个分页文章的所有页面HTML内容。&quot;&quot;&quot;</span><br><span class="line">    full_html = &quot;&quot;</span><br><span class="line">    current_url = url</span><br><span class="line">    processed_urls = set()</span><br><span class="line">    while current_url and current_url not in processed_urls:</span><br><span class="line">        logger.debug(&quot;%s正在抓取分页内容: %s&quot;, log_prefix, current_url)</span><br><span class="line">        processed_urls.add(current_url)</span><br><span class="line">        html_content = await fetch(session, current_url, log_prefix)</span><br><span class="line">        if not html_content:</span><br><span class="line">            break</span><br><span class="line">        soup = BeautifulSoup(html_content, &#x27;html.parser&#x27;)</span><br><span class="line">        content_area = soup.select_one(&#x27;div.entry-content, div.post-content, article.post, div#content&#x27;)</span><br><span class="line">        if content_area:</span><br><span class="line">            full_html += str(content_area)</span><br><span class="line">        else:</span><br><span class="line">            full_html += html_content</span><br><span class="line">        next_page_link = soup.select_one(&#x27;a.next.page-numbers, a[rel=next], .pagination-next a, a:-soup-contains(&quot;Next Page&quot;)&#x27;)</span><br><span class="line">        if next_page_link and next_page_link.get(&#x27;href&#x27;):</span><br><span class="line">            current_url = urljoin(current_url, next_page_link[&#x27;href&#x27;])</span><br><span class="line">            await asyncio.sleep(random.uniform(0.5, 2.0)) # 抓取分页时也增加随机延迟</span><br><span class="line">        else:</span><br><span class="line">            current_url = None</span><br><span class="line">    return full_html</span><br><span class="line">    </span><br><span class="line">async def extract_images_from_page(session, article_url, log_prefix=&quot;&quot;):</span><br><span class="line">    &quot;&quot;&quot;(更精确版) 从一个可能分页的文章中提取所有图片URL。&quot;&quot;&quot;</span><br><span class="line">    full_html_content = await fetch_paginated_content(session, article_url, log_prefix)</span><br><span class="line">    if not full_html_content:</span><br><span class="line">        return []</span><br><span class="line">        </span><br><span class="line">    soup = BeautifulSoup(full_html_content, &#x27;html.parser&#x27;)</span><br><span class="line">    image_urls = set()</span><br><span class="line">    content_area = soup.select_one(&#x27;div.entry-content, div.post-content, article.post, div#content&#x27;)</span><br><span class="line">    search_area = content_area if content_area else soup</span><br><span class="line"></span><br><span class="line">    for img in search_area.find_all(&#x27;img&#x27;):</span><br><span class="line">        src = img.get(&#x27;data-src&#x27;) or img.get(&#x27;src&#x27;)</span><br><span class="line">        if src:</span><br><span class="line">            full_url = urljoin(article_url, src.strip())</span><br><span class="line">            if REGEX[&quot;image_file_ext&quot;].search(full_url.split(&#x27;?&#x27;)[0]):</span><br><span class="line">                image_urls.add(full_url)</span><br><span class="line">    </span><br><span class="line">    return list(image_urls)</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 主要处理逻辑 (异步)</span><br><span class="line"># ==============================================================================</span><br><span class="line">async def process_entry(session, db, entry, feed_title):</span><br><span class="line">    &quot;&quot;&quot;处理单个 RSS 条目，并记录下载失败 (基于文章标题全局去重)。&quot;&quot;&quot;</span><br><span class="line">    entry_id = getattr(entry, &#x27;id&#x27;, entry.link)</span><br><span class="line">    article_url = entry.link</span><br><span class="line">    log_prefix = f&quot;[&#123;feed_title[:15]&#125;] &quot;</span><br><span class="line"></span><br><span class="line">    # 1. 首先获取并清理标题</span><br><span class="line">    post_title = sanitize_folder_name(entry.title)</span><br><span class="line"></span><br><span class="line">    # 2. 使用清理后的标题进行全局重复检查</span><br><span class="line">    if not article_url or await db.is_downloaded(post_title):</span><br><span class="line">        if not article_url:</span><br><span class="line">            return 0, 0</span><br><span class="line">        logger.info(&quot;%s文章 &#x27;%s&#x27; 已在全局历史中存在，跳过。&quot;, log_prefix, post_title)</span><br><span class="line">        return 0, 0</span><br><span class="line">    </span><br><span class="line">    # 如果没跳过，说明是新文章，继续处理</span><br><span class="line">    logger.info(&quot;%s处理新文章: &#x27;%s&#x27;&quot;, log_prefix, post_title)</span><br><span class="line"></span><br><span class="line">    image_urls = []</span><br><span class="line">    html_description = getattr(entry, &#x27;description&#x27;, &#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    if html_description:</span><br><span class="line">        soup = BeautifulSoup(html_description, &#x27;html.parser&#x27;)</span><br><span class="line">        gallery_div = soup.select_one(&#x27;div.gallery, div#gallery&#x27;)</span><br><span class="line">        if gallery_div:</span><br><span class="line">            links = gallery_div.select(&#x27;a&#x27;)</span><br><span class="line">            for link in links:</span><br><span class="line">                href = link.get(&#x27;href&#x27;)</span><br><span class="line">                if href and REGEX[&quot;image_file_ext&quot;].search(href.split(&#x27;?&#x27;)[0]):</span><br><span class="line">                    image_urls.append(urljoin(article_url, href.strip()))</span><br><span class="line">        </span><br><span class="line">        if not image_urls:</span><br><span class="line">            for img in soup.find_all(&#x27;img&#x27;):</span><br><span class="line">                src = img.get(&#x27;src&#x27;) or img.get(&#x27;data-src&#x27;)</span><br><span class="line">                if src:</span><br><span class="line">                    image_urls.append(urljoin(article_url, src.strip()))</span><br><span class="line"></span><br><span class="line">    if not image_urls and CONFIG.get(&#x27;allow_fallback_to_source_site&#x27;, False):</span><br><span class="line">        logger.warning(&quot;%s在RSS源中未找到图片，将访问源网站: %s&quot;, log_prefix, article_url)</span><br><span class="line">        image_urls = await extract_images_from_page(session, article_url, log_prefix)</span><br><span class="line">    elif image_urls:</span><br><span class="line">        unique_urls = list(dict.fromkeys(image_urls))</span><br><span class="line">        image_urls = unique_urls</span><br><span class="line">        logger.info(&quot;%s已成功从RSS源描述中提取 %d 个图片地址。&quot;, log_prefix, len(image_urls))</span><br><span class="line"></span><br><span class="line">    if not image_urls:</span><br><span class="line">        logger.warning(&quot;%s文章 &#x27;%s&#x27; 未能找到任何图片。&quot;, log_prefix, post_title)</span><br><span class="line">        # 将标题添加到数据库</span><br><span class="line">        await db.add_entry(post_title, feed_title)</span><br><span class="line">        return 1, 0</span><br><span class="line"></span><br><span class="line">    post_folder = os.path.join(CONFIG[&#x27;base_folder&#x27;], sanitize_folder_name(feed_title), post_title)</span><br><span class="line">    extended_log_prefix = f&quot;[&#123;feed_title&#125;][&#123;post_title&#125;] &quot;</span><br><span class="line"></span><br><span class="line">    tasks = []</span><br><span class="line">    for i, img_url in enumerate(image_urls):</span><br><span class="line">        ext = os.path.splitext(urlparse(img_url).path)[1]</span><br><span class="line">        if not REGEX[&quot;image_file_ext&quot;].search(ext):</span><br><span class="line">            ext = &quot;.jpg&quot;</span><br><span class="line">        filename = f&quot;&#123;i+1:03d&#125;&#123;ext&#125;&quot;</span><br><span class="line">        filepath = os.path.join(post_folder, filename)</span><br><span class="line"></span><br><span class="line">        if not os.path.exists(filepath):</span><br><span class="line">            task = asyncio.create_task(download_image(session, img_url, filepath, article_url, extended_log_prefix))</span><br><span class="line">            tasks.append(task)</span><br><span class="line">        else:</span><br><span class="line">            await asyncio.sleep(0.05)</span><br><span class="line"></span><br><span class="line">    if not tasks:</span><br><span class="line">        logger.info(&quot;%s所有 %d 张图片均已存在，跳过下载。&quot;, extended_log_prefix, len(image_urls))</span><br><span class="line">        # 将标题添加到数据库</span><br><span class="line">        await db.add_entry(post_title, feed_title)</span><br><span class="line">        return 1, 0</span><br><span class="line"></span><br><span class="line">    # 使用 asyncio.as_completed 来逐个处理下载任务，并加入随机延时</span><br><span class="line">    success_count = 0</span><br><span class="line">    pbar = aio_tqdm(total=len(tasks), desc=f&quot;&#123;log_prefix&#125;下载 &#x27;&#123;post_title[:20]&#125;…&#x27;&quot;, unit=&quot;张&quot;, leave=False)</span><br><span class="line">    for task in asyncio.as_completed(tasks):</span><br><span class="line">        result, _ = await task</span><br><span class="line">        if result:</span><br><span class="line">            success_count += 1</span><br><span class="line">        pbar.update(1)</span><br><span class="line">        # 关键优化：在每次下载后都加入一个随机的短暂延时</span><br><span class="line">        await asyncio.sleep(random.uniform(0.5, 1.5))</span><br><span class="line">    pbar.close()</span><br><span class="line">    </span><br><span class="line">    failed_count = len(tasks) - success_count</span><br><span class="line"></span><br><span class="line">    if failed_count == 0:</span><br><span class="line">        logger.info(&quot;%s成功为 &#x27;%s&#x27; 下载 %d 张新图片。&quot;, log_prefix, post_title, success_count)</span><br><span class="line">    else:</span><br><span class="line">        logger.error(&quot;%s&#x27;%s&#x27; 下载完成，%d 张成功, %d 张失败。详情请查看错误日志文件。&quot;, log_prefix, post_title, success_count, failed_count)</span><br><span class="line">        </span><br><span class="line">    # 将标题添加到数据库</span><br><span class="line">    await db.add_entry(post_title, feed_title)</span><br><span class="line">    return 1, success_count</span><br><span class="line"></span><br><span class="line">async def process_feed(session, db, feed_info):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    处理单个 RSS 订阅源。</span><br><span class="line">    优先尝试正常解析，如果因内容非XML而失败，则自动使用浏览器User-Agent重试。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    feed_title, feed_url = feed_info</span><br><span class="line">    log_prefix = f&quot;[&#123;feed_title&#125;] &quot;</span><br><span class="line">    logger.info(&quot;%s开始处理...&quot;, log_prefix)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        # --- 步骤 1: 首次尝试，不带任何伪装 ---</span><br><span class="line">        feed_data = await asyncio.to_thread(feedparser.parse, feed_url)</span><br><span class="line"></span><br><span class="line">        # --- 步骤 2: 检查首次尝试是否因“反爬虫”失败 ---</span><br><span class="line">        if feed_data.bozo and isinstance(feed_data.bozo_exception, feedparser.NonXMLContentType):</span><br><span class="line">            logger.warning(&quot;%s首次尝试失败，服务器返回了HTML页面。正在切换伪装模式重试...&quot;, log_prefix)</span><br><span class="line">            </span><br><span class="line">            # --- 步骤 3: 切换为伪装模式进行重试 ---</span><br><span class="line">            agent = CONFIG.get(&#x27;request_headers&#x27;, &#123;&#125;).get(&#x27;User-Agent&#x27;, &#x27;Mozilla/5.0&#x27;)</span><br><span class="line">            feed_data = await asyncio.to_thread(feedparser.parse, feed_url, agent=agent)</span><br><span class="line"></span><br><span class="line">        # --- 步骤 4: 检查最终结果 ---</span><br><span class="line">        if feed_data.bozo:</span><br><span class="line">            logger.warning(&quot;%s订阅源可能格式错误或无法访问: %s. 错误: %s&quot;, log_prefix, feed_url, feed_data.bozo_exception)</span><br><span class="line">        </span><br><span class="line">        # 后续逻辑保持不变</span><br><span class="line">        entry_tasks = [process_entry(session, db, entry, feed_title) for entry in feed_data.entries]</span><br><span class="line">        results = await asyncio.gather(*entry_tasks)</span><br><span class="line">        </span><br><span class="line">        total_new_entries = sum(r[0] for r in results)</span><br><span class="line">        total_new_images = sum(r[1] for r in results)</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;%s处理完毕。发现 %d 篇新文章，下载了 %d 张新图片。&quot;, log_prefix, total_new_entries, total_new_images)</span><br><span class="line">        return total_new_entries, total_new_images</span><br><span class="line">        </span><br><span class="line">    except Exception as e:</span><br><span class="line">        logger.error(&quot;%s处理时发生意外错误: %s&quot;, log_prefix, e, exc_info=True)</span><br><span class="line">        return 0, 0</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    &quot;&quot;&quot;异步主函数，运行下载器。&quot;&quot;&quot;</span><br><span class="line">    load_config()</span><br><span class="line"></span><br><span class="line">    os.makedirs(CONFIG[&#x27;base_folder&#x27;], exist_ok=True)</span><br><span class="line">    db_path = os.path.join(CONFIG[&#x27;base_folder&#x27;], CONFIG[&#x27;db_file&#x27;])</span><br><span class="line">    db = DatabaseManager(db_path)</span><br><span class="line">    await db.connect()</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        # 如果配置了cookie文件则加载，否则忽略</span><br><span class="line">        cookie_file = CONFIG.get(&#x27;cookie_file&#x27;)</span><br><span class="line">        if cookie_file and not os.path.exists(cookie_file):</span><br><span class="line">            logger.warning(f&quot;配置了cookie文件 &#x27;&#123;cookie_file&#125;&#x27; 但文件不存在，将不加载Cookie。&quot;)</span><br><span class="line">            cookie_jar = aiohttp.CookieJar()</span><br><span class="line">        else:</span><br><span class="line">            cookie_jar = NetscapeCookieJar(cookie_file)</span><br><span class="line"></span><br><span class="line">        connector = aiohttp.TCPConnector(limit_per_host=CONFIG.get(&#x27;max_concurrent_downloads&#x27;, 8))</span><br><span class="line">        </span><br><span class="line">        async with aiohttp.ClientSession(connector=connector, cookie_jar=cookie_jar) as session:</span><br><span class="line">            with open(CONFIG[&#x27;opml_file&#x27;], &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">                opml_data = f.read()</span><br><span class="line">            </span><br><span class="line">            opml_soup = BeautifulSoup(opml_data, &#x27;xml&#x27;)</span><br><span class="line">            all_feeds = [</span><br><span class="line">                (outline.get(&#x27;text&#x27;, &#x27;未命名源&#x27;), outline.get(&#x27;xmlUrl&#x27;))</span><br><span class="line">                for outline in opml_soup.find_all(&#x27;outline&#x27;) if outline.get(&#x27;xmlUrl&#x27;)</span><br><span class="line">            ]</span><br><span class="line">            feeds_to_process = [f for f in all_feeds if f[0] not in CONFIG.get(&#x27;skip_feeds&#x27;, [])]</span><br><span class="line">            logger.info(&quot;在 %s 中发现 %d 个订阅源。将处理 %d 个。&quot;, CONFIG[&#x27;opml_file&#x27;], len(all_feeds), len(feeds_to_process))</span><br><span class="line"></span><br><span class="line">            stats = &#123;&#x27;new_entries&#x27;: 0, &#x27;new_images&#x27;: 0&#125;</span><br><span class="line">            </span><br><span class="line">            semaphore = asyncio.Semaphore(CONFIG.get(&#x27;max_concurrent_feeds&#x27;, 4))</span><br><span class="line">            </span><br><span class="line">            async def run_with_semaphore(feed_info):</span><br><span class="line">                async with semaphore:</span><br><span class="line">                    return await process_feed(session, db, feed_info)</span><br><span class="line"></span><br><span class="line">            feed_tasks = [run_with_semaphore(feed) for feed in feeds_to_process]</span><br><span class="line">            </span><br><span class="line">            for future in aio_tqdm.as_completed(feed_tasks, total=len(feed_tasks), desc=&quot;处理订阅源&quot;, unit=&quot;个&quot;):</span><br><span class="line">                new_entries, new_images = await future</span><br><span class="line">                stats[&#x27;new_entries&#x27;] += new_entries</span><br><span class="line">                stats[&#x27;new_images&#x27;] += new_images</span><br><span class="line"></span><br><span class="line">            logger.info(&quot;=&quot; * 60)</span><br><span class="line">            logger.info(&quot;所有订阅源处理完毕。&quot;)</span><br><span class="line">            logger.info(&quot;总计处理新文章: %d 篇&quot;, stats[&#x27;new_entries&#x27;])</span><br><span class="line">            logger.info(&quot;总计下载新图片: %d 张&quot;, stats[&#x27;new_images&#x27;])</span><br><span class="line">            logger.info(&quot;数据库位于: %s&quot;, os.path.abspath(db_path))</span><br><span class="line">            logger.info(&quot;=&quot; * 60)</span><br><span class="line"></span><br><span class="line">    except FileNotFoundError as e:</span><br><span class="line">        logger.error(&quot;未找到关键文件: %s&quot;, e)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logger.critical(&quot;主程序发生严重错误: %s&quot;, e, exc_info=True)</span><br><span class="line">    finally:</span><br><span class="line">        await db.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=&#x27;异步 RSS 图片下载器 (最终优化版 - 模拟人类行为)&#x27;,</span><br><span class="line">        formatter_class=argparse.RawTextHelpFormatter</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(&#x27;--daemon&#x27;, action=&#x27;store_true&#x27;, help=&#x27;以守护进程模式运行，按固定间隔重复执行。&#x27;)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        &#x27;--interval&#x27;, </span><br><span class="line">        type=int, </span><br><span class="line">        default=7200, </span><br><span class="line">        help=&#x27;守护进程模式下的检查间隔（秒）。\n默认值: 7200 (2小时)。&#x27;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    if not args.daemon:</span><br><span class="line">        try:</span><br><span class="line">            asyncio.run(main())</span><br><span class="line">        except KeyboardInterrupt:</span><br><span class="line">            logger.info(&quot;用户中断了程序。正在关闭...&quot;)</span><br><span class="line">    else:</span><br><span class="line">        logger.info(f&quot;守护进程模式已启动，运行间隔为 &#123;args.interval&#125; 秒 (&#123;args.interval / 3600:.1f&#125; 小时)。&quot;)</span><br><span class="line">        while True:</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            try:</span><br><span class="line">                logger.info(&quot;开始新一轮的检查与下载...&quot;)</span><br><span class="line">                asyncio.run(main())</span><br><span class="line">            except KeyboardInterrupt:</span><br><span class="line">                logger.info(&quot;守护进程被用户中断。正在退出...&quot;)</span><br><span class="line">                break</span><br><span class="line">            except Exception as e:</span><br><span class="line">                logger.critical(f&quot;守护进程在执行任务时发生严重错误: &#123;e&#125;&quot;, exc_info=True)</span><br><span class="line">            </span><br><span class="line">            end_time = time.time()</span><br><span class="line">            elapsed = end_time - start_time</span><br><span class="line">            sleep_time = max(60, args.interval - elapsed)</span><br><span class="line">            </span><br><span class="line">            next_run_time_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time() + sleep_time))</span><br><span class="line">            logger.info(f&quot;本轮任务执行完毕，耗时 &#123;elapsed:.1f&#125; 秒。将在 &#123;sleep_time:.1f&#125; 秒后开始下一轮（预计时间: &#123;next_run_time_str&#125;）。&quot;)</span><br><span class="line">            time.sleep(sleep_time)</span><br></pre></td></tr></table></figure><h2 id="⚙️-配置文件"><a href="#⚙️-配置文件" class="headerlink" title="⚙️ 配置文件"></a>⚙️ 配置文件</h2><p><code>config.yaml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"># ==============================================================================</span><br><span class="line"># 通用设置</span><br><span class="line"># ==============================================================================</span><br><span class="line"># 所有下载内容的根目录</span><br><span class="line">base_folder: &quot;photos&quot;</span><br><span class="line"># 数据库文件名 (将在根目录内创建)</span><br><span class="line">db_file: &quot;history.db&quot;</span><br><span class="line"># 包含 RSS 订阅源的 OPML 文件</span><br><span class="line">opml_file: &quot;feeds.opml&quot;</span><br><span class="line"># 用于存储错误和失败记录的日志文件</span><br><span class="line">error_log_file: &quot;downloader_errors.log&quot;</span><br><span class="line"># 需要跳过处理的订阅源标题列表</span><br><span class="line">skip_feeds:</span><br><span class="line">  - &quot;示例：需要跳过的订阅源&quot;</span><br><span class="line"></span><br><span class="line"># 是否允许在RSS内容为空时，回退到访问原始网站链接。</span><br><span class="line"># 对于内容完整的RSS源，强烈建议设为 false，可以根除抓取到网站推荐图的问题。</span><br><span class="line"># 如果有一些只提供摘要的RSS源，则需要设为 true。</span><br><span class="line">allow_fallback_to_source_site: false</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 并发与延迟设置</span><br><span class="line"># ==============================================================================</span><br><span class="line"># 同时处理的订阅源最大数量</span><br><span class="line">max_concurrent_feeds: 1</span><br><span class="line"># 每个条目同时下载图片的最大数量</span><br><span class="line">max_concurrent_downloads: 8</span><br><span class="line"># 通用网络请求超时时间 (秒)</span><br><span class="line">request_timeout: 45</span><br><span class="line"># 失败后重试的基础延迟时间 (秒)</span><br><span class="line">retry_delay: 10</span><br><span class="line"># 单个请求失败后的最大重试次数</span><br><span class="line">max_retries: 10</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 网络请求头</span><br><span class="line"># ==============================================================================</span><br><span class="line"># 用于抓取 RSS 和 HTML 页面的请求头</span><br><span class="line">request_headers:</span><br><span class="line">  User-Agent: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br><span class="line">  Accept: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span><br><span class="line">  Accept-Language: &quot;en-US,en;q=0.9,zh-CN;q=0.8&quot;</span><br><span class="line"></span><br><span class="line"># 用于下载图片的请求头</span><br><span class="line">image_headers:</span><br><span class="line">  User-Agent: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br><span class="line">  Accept: &quot;image/webp,image/apng,image/*,*/*;q=0.8&quot;</span><br><span class="line"></span><br><span class="line"># ==============================================================================</span><br><span class="line"># 文件夹与文件名规则</span><br><span class="line"># ==============================================================================</span><br><span class="line">folder_name_rules:</span><br><span class="line">  max_length: 150</span><br><span class="line">  # 需要被替换的特殊字符</span><br><span class="line">  replace_chars:</span><br><span class="line">    &#x27;[&#x27;: &#x27;【&#x27;</span><br><span class="line">    &#x27;]&#x27;: &#x27;】&#x27;</span><br><span class="line">    &#x27;:&#x27;: &#x27;：&#x27;</span><br><span class="line">    &#x27;*&#x27;: &#x27;＊&#x27;</span><br><span class="line">    &#x27;?&#x27;: &#x27;？&#x27;</span><br><span class="line">    &#x27;&quot;&#x27;: &#x27;“&#x27;</span><br><span class="line">    &#x27;&lt;&#x27;: &#x27;＜&#x27;</span><br><span class="line">    &#x27;&gt;&#x27;: &#x27;＞&#x27;</span><br><span class="line">    &#x27;|&#x27;: &#x27;｜&#x27;</span><br></pre></td></tr></table></figure><h2 id="📡-演示RSS源"><a href="#📡-演示RSS源" class="headerlink" title="📡 演示RSS源"></a>📡 演示RSS源</h2><p><code>feeds.opml</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;opml version=&quot;2.0&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;My RSS Feeds&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;outline text=&quot;🖼️图片画廊&quot;&gt;</span><br><span class="line">      &lt;outline text=&quot;80K - 写真网&quot; type=&quot;rss&quot; xmlUrl=&quot;https://127.0.0.1&quot; htmlUrl=&quot;https://127.0.0.1&quot;/&gt;</span><br><span class="line">    &lt;/outline&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/opml&gt;</span><br></pre></td></tr></table></figure><h2 id="🔗-脚本依赖"><a href="#🔗-脚本依赖" class="headerlink" title="🔗 脚本依赖"></a>🔗 脚本依赖</h2><p><code>requirements.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aiohttp[cchardet,aiodns]</span><br><span class="line">aiosqlite</span><br><span class="line">beautifulsoup4</span><br><span class="line">feedparser</span><br><span class="line">PyYAML</span><br><span class="line">tqdm</span><br><span class="line">lxm</span><br></pre></td></tr></table></figure><h2 id="🚀-安装与设置"><a href="#🚀-安装与设置" class="headerlink" title="🚀 安装与设置"></a>🚀 安装与设置</h2><h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h4><p>安装 <strong>Python</strong> </p><h4 id="2-获取文件"><a href="#2-获取文件" class="headerlink" title="2. 获取文件"></a>2. 获取文件</h4><p>把创建的所有文件 (<code>.py</code>, <code>.yaml</code>, <code>feeds.opml</code>,<code>.txt</code>) 并将它们放在同一个文件夹中。</p><h4 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3. 安装依赖"></a>3. 安装依赖</h4><p>进入项目所在的文件夹，打开终端 ，然后运行以下命令来安装所有必需的 Python 库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p><strong>主要依赖库包括</strong>: <code>aiohttp</code>, <code>aiosqlite</code>, <code>beautifulsoup4</code>, <code>feedparser</code>, <code>pyyaml</code>, <code>tqdm</code>, <code>lxm</code>。</p><h2 id="⚙️-配置说明"><a href="#⚙️-配置说明" class="headerlink" title="⚙️ 配置说明"></a>⚙️ 配置说明</h2><h4 id="1-配置订阅源-feeds-opml"><a href="#1-配置订阅源-feeds-opml" class="headerlink" title="1. 配置订阅源 (feeds.opml)"></a>1. 配置订阅源 (<code>feeds.opml</code>)</h4><p>最关键的一步。从RSS 阅读器（如 Feedly, Inoreader, Freshrss 等）中，将您的订阅源导出为 OPML 文件格式。将导出的文件命名为 <code>feeds.opml</code> 并放入项目文件夹。</p><blockquote><p><strong>提示</strong>: 请确保导出的 OPML 文件是 UTF-8 编码，以避免解析错误。</p></blockquote><h4 id="2-调整主配置-config-yaml"><a href="#2-调整主配置-config-yaml" class="headerlink" title="2. 调整主配置 (config.yaml)"></a>2. 调整主配置 (<code>config.yaml</code>)</h4><p>打开 <code>config.yaml</code> 文件，根据里面的中文注释修改配置项。最重要的几项是：</p><ul><li><code>base_folder</code>: 图片保存的目录。</li><li><strong>反爬虫策略相关</strong>:<ul><li><code>max_concurrent_feeds</code>: 同时处理的网站（订阅源）数量。<strong>建议首次运行或遇到频繁失败时设为 <code>1</code></strong>。</li><li><code>max_concurrent_downloads</code>: 同时下载的图片数量。<strong>建议设为 <code>1</code> 到 <code>8</code> 之间，数值越小越不容易被封锁</strong>。</li><li><code>retry_delay</code>: 每次重试的基础等待时间（秒）。<strong>如果频繁失败，可以适当增加此值，例如 <code>10</code></strong>。</li></ul></li><li><code>(可选) Cookie 配置</code>:<ul><li><code>cookie_file</code>: 如果要下载登录后才能访问的内容，可以在此指定 <code>cookies.txt</code> 文件的路径。</li></ul></li></ul><h2 id="▶️-如何使用"><a href="#▶️-如何使用" class="headerlink" title="▶️ 如何使用"></a>▶️ 如何使用</h2><h4 id="首次运行建议"><a href="#首次运行建议" class="headerlink" title="首次运行建议"></a>首次运行建议</h4><ol><li>将 <code>config.yaml</code> 中的 <code>max_concurrent_feeds</code> 和 <code>max_concurrent_downloads</code> 都设置为 <code>1</code>。</li><li>运行脚本进行测试。</li><li>如果下载稳定，再逐步调高并发数，找到速度和稳定性的平衡点。</li></ol><h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><p>完成所有配置后，在终端中进入项目文件夹，运行以下命令即可启动脚本：</p><p><strong>1. 标准模式：</strong> (运行一次后自动退出)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python downloader.py</span><br></pre></td></tr></table></figure><p><strong>2. 守护进程模式：</strong> (使用默认的2小时间隔，在后台持续运行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python downloader.py --daemon</span><br></pre></td></tr></table></figure><p><strong>3. 守护进程模式 + 自定义间隔：</strong> (每30分钟检查一次)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python downloader.py --daemon --interval 1800</span><br></pre></td></tr></table></figure><p>脚本将开始读取 <code>feeds.opml</code>，检查数据库历史记录，并下载所有新的图集。您可以在控制台看到详细的进度和日志。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我为什么不注册互联网账号</title>
      <link href="/2025/04/17/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%B3%A8%E5%86%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%B4%A6%E5%8F%B7/"/>
      <url>/2025/04/17/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%B3%A8%E5%86%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cloudflare.free-img.ososo.org/file/blog/1744864564395_Image2025.4.17.12_16_44.png" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一下在小米万兆路由器上安装 Entware</title>
      <link href="/2025/03/29/%E5%9C%A8%E5%B0%8F%E7%B1%B3%E4%B8%87%E5%85%86%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85%20Entware/"/>
      <url>/2025/03/29/%E5%9C%A8%E5%B0%8F%E7%B1%B3%E4%B8%87%E5%85%86%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85%20Entware/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>Entware 是一个适用于嵌入式设备的软件包管理器，可以让你方便地安装各种软件，例如 <code>nano</code>、<code>htop</code>、<code>aria2</code> 等，扩展路由器的功能。</p><p><strong>重要提示：</strong></p><ul><li><strong>刷机有风险，请务必备份路由器固件！</strong> 如果操作不当，可能会导致路由器变砖。 强烈建议在进行任何操作之前备份当前的路由器固件。</li><li><strong>小米官方固件默认不支持 Entware，刷入需要解锁SSH</strong> 本教程以假设你已经解锁了 SSH 。</li><li><strong>不同固件版本可能会有差异，请根据你的实际情况进行调整。</strong> 仔细阅读你的固件文档，并根据实际情况进行修改。</li><li><strong>本教程使用外接存储设备（U 盘或移动硬盘）来存储 Entware 软件包。</strong> 建议使用 USB 3.0 的存储设备以获得更好的性能。</li></ul><p><strong>准备工作：</strong></p><ol><li><strong>小米万兆路由器：</strong> 已经解锁 SSH 。</li><li><strong>外接存储设备：</strong> U 盘或移动硬盘，建议 100GB 左右，格式化为 ext4 格式。 确保你的存储设备有足够的空间。</li><li><strong>SSH 客户端：</strong> 例如 PuTTY (Windows) 或 Terminal (macOS&#x2F;Linux)。</li><li><strong>稳定的网络连接：</strong> 安装过程需要下载软件包，需要稳定的网络连接。</li></ol><p><strong>步骤：</strong></p><ol><li><p><strong>启用 SSH：</strong></p><ul><li>解锁方法自行搜索。</li></ul></li><li><p><strong>连接到路由器 SSH：</strong></p><ul><li>使用 SSH 客户端软件。</li><li>输入路由器的 IP 地址、端口 (默认是 22)，用户名 (通常是 <code>root</code>) 和密码 (你在第一步设置的密码)。</li><li>连接成功后，你会看到一个命令行界面。</li></ul></li><li><p><strong>确定架构：</strong></p><ul><li><p>在 SSH 命令行中输入以下命令，查看路由器的 CPU 架构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br></pre></td></tr></table></figure></li><li><p>常见的架构有 <code>armv7l</code>, <code>aarch64</code> (arm64) 等。 <strong>请记住这个架构，稍后会用到。</strong> 不同的架构需要使用不同的 Entware 安装包。</p></li></ul></li><li><p><strong>挂载存储设备：</strong></p><ul><li><p>将存储设备插入路由器的 USB 接口。</p></li><li><p>使用以下命令查看存储设备是否被识别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure></li><li><p>找到你的存储设备，例如 <code>/dev/sda1</code> 或 <code>/dev/sdb1</code>。 <strong>请注意，设备的名称可能会不同，请根据你的实际情况选择。</strong> 仔细检查设备名称，避免错误操作。</p></li><li><p>创建一个 <code>myentware</code> 文件夹，并在其下创建 <code>opt</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /mnt/你的存储设备路径/myentware/opt</span><br></pre></td></tr></table></figure><p><strong>请将 <code>你的存储设备路径</code> 替换为你的实际路径。</strong> 例如 <code>/mnt/usb-25a3499d</code>。</p></li><li><p>将路由器原有的 <code>/opt</code> 目录的内容复制到外接存储设备上的 <code>/opt</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /opt/* /mnt/你的存储设备路径/myentware/opt</span><br></pre></td></tr></table></figure><p><strong>请将 <code>你的存储设备路径</code> 替换为你的实际路径。</strong> 例如 <code>/mnt/usb-25a3499d</code>。 这一步是为了保留路由器原有的 <code>/opt</code> 目录，避免出现问题。</p></li></ul></li><li><p><strong>挂载存储设备 (续)：</strong></p><ul><li><p>使用 <code>mount -o bind</code> 命令将外接存储设备上的 <code>/opt</code> 目录挂载到路由器原有的 <code>/opt</code> 目录上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /mnt/你的存储设备路径/myentware/opt /opt</span><br></pre></td></tr></table></figure><p><strong>请将 <code>你的存储设备路径</code> 替换为你的实际路径。</strong> 例如 <code>/mnt/usb-25a3499d</code>。 这一步是将 Entware 的安装目录指向你的外接存储设备。</p></li></ul></li><li><p><strong>安装 Entware：</strong></p><ul><li><p>运行以下命令下载并执行 Entware 安装脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://bin.entware.net/aarch64-k3.10/installer/alternative.sh | sh</span><br></pre></td></tr></table></figure><p><strong>请根据你的 CPU 架构选择正确的安装脚本。</strong> 如果你的架构不是 <code>aarch64-k3.10</code>，请将 URL 替换为正确的 URL。 你可以在 <a href="https://entware.net/">Entware 官方网站</a> 找到不同架构的安装脚本。 仔细阅读安装脚本的输出信息，确保没有错误发生。</p></li></ul></li><li><p><strong>配置 Entware 环境：</strong></p><ul><li><p>编辑 <code>/etc/profile</code> 文件，添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/opt/bin:/opt/sbin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">alias</span> opkg=<span class="string">&quot;/opt/bin/opkg&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>保存文件并退出。 可以使用 <code>nano</code> 或 <code>vi</code> 编辑器。</p></li><li><p>使环境变量和别名生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>这一步是为了让当前的 SSH 会话使用新的环境变量和别名。</p></li></ul></li><li><p><strong>创建开机自启脚本：</strong></p><ul><li><p>创建 <code>/data/myscripts/auto_start.sh</code> 文件，添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载 /opt 目录</span></span><br><span class="line">mount -o <span class="built_in">bind</span> /mnt/你的存储设备路径/myentware/opt /opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量和别名</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/opt/bin:/opt/sbin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">alias</span> opkg=<span class="string">&quot;/opt/bin/opkg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Entware 服务</span></span><br><span class="line"><span class="built_in">sleep</span> 10</span><br><span class="line">/opt/etc/init.d/rc.unslung start</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p><strong>请将 <code>你的存储设备路径</code> 替换为你的实际路径。</strong> 例如 <code>/mnt/usb-25a3499d</code>。 <code>sleep 10</code> 命令是为了等待存储设备挂载完成，避免启动 Entware 服务时出错。</p></li><li><p>设置 <code>/data/myscripts/auto_start.sh</code> 文件的执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /data/myscripts/auto_start.sh</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>配置防火墙自启脚本：</strong></p><ul><li><p>编辑 <code>/data/etc/config/firewall</code> 文件，添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config include &#x27;myscripts_auto_start&#x27;</span><br><span class="line">    option type &#x27;script&#x27;</span><br><span class="line">    option path &#x27;/data/myscripts/auto_start.sh&#x27;</span><br><span class="line">    option enabled &#x27;1&#x27;</span><br></pre></td></tr></table></figure><p>这一步是为了让路由器在启动时自动执行 <code>/data/myscripts/auto_start.sh</code> 脚本。</p></li></ul></li><li><p><strong>重启防火墙服务：</strong></p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service firewall restart</span><br></pre></td></tr></table></figure></code></pre><p>这一步是为了让防火墙加载新的配置。</p></li><li><p><strong>重启路由器：</strong></p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></code></pre><p>重启路由器，使所有配置生效。</p></li><li><p><strong>验证 Entware 是否安装成功：</strong></p><ul><li><p>重启路由器后，重新连接 SSH。</p></li><li><p>运行以下命令，查看 Entware 的服务是否正在运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/etc/init.d/rc.unslung status</span><br></pre></td></tr></table></figure><p>如果 Entware 正在运行，你应该会看到一些服务的状态信息。</p></li><li><p>运行以下命令，检查环境变量是否正确设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>输出应该包含 <code>/opt/bin</code> 和 <code>/opt/sbin</code>。</p></li><li><p>运行以下命令，更新软件包列表并安装 <code>nano</code> 编辑器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install nano</span><br></pre></td></tr></table></figure><p>如果更新和安装成功，没有报错信息，则说明 Entware 已经可以正常工作。</p></li><li><p>运行以下命令，测试 <code>nano</code> 编辑器是否能够正常启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /tmp/test.txt</span><br></pre></td></tr></table></figure><p>如果 <code>nano</code> 编辑器能够正常启动，则说明 Entware 已经成功安装。</p></li></ul></li></ol><p><strong>如果以上步骤都能够正常完成，那么恭喜你，你已经成功在小米万兆路由器上安装了 Entware！</strong></p><p><strong>常见问题及解决方法：</strong></p><ul><li><strong>无法连接到路由器 SSH：</strong> 检查 SSH 服务是否已启用，以及 IP 地址、端口、用户名和密码是否正确。</li><li><strong>存储设备无法挂载：</strong> 检查存储设备是否被路由器识别，以及挂载点是否正确。 使用 <code>dmesg</code> 命令查看系统日志，可能会有关于存储设备挂载失败的信息。</li><li><strong>安装脚本下载失败：</strong> 检查网络连接是否正常，以及安装脚本的 URL 是否正确。 尝试使用 <code>ping</code> 命令测试网络连接。</li><li><strong><code>opkg</code> 命令无法使用：</strong> 检查环境变量是否已正确设置。 确保 <code>/opt/bin</code> 和 <code>/opt/sbin</code> 已经添加到了 <code>PATH</code> 环境变量中。</li><li><strong>路由器重启后 Entware 无法工作：</strong> 检查开机自启脚本是否已正确配置，以确保存储设备在启动时自动挂载，并且 Entware 服务能够正常启动。 查看系统日志，可能会有关于启动失败的信息。</li><li><strong><code>opkg update</code> 失败：</strong> 检查系统时间是否正确。 错误的系统时间会导致 SSL 证书验证失败。 尝试手动设置时间，或者安装 <code>ntpd</code> 软件包来自动同步时间。</li></ul><p><strong>总结：</strong></p><p>本教程提供了在小米万兆路由器上安装 Entware 的详细步骤。 请务必仔细阅读以上步骤，并根据你的实际情况进行调整。 如果你遇到问题，可以查阅 Entware 官方文档或在网上搜索相关的解决方案。</p><p><strong>再次提醒：刷机有风险，请务必备份路由器固件！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下使用FRP内网穿透Jellyfin时不显示真实IP的解决办法</title>
      <link href="/2025/01/30/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E4%BD%BF%E7%94%A8FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8FJellyfin%E6%97%B6%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9C%9F%E5%AE%9EIP%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2025/01/30/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E4%BD%BF%E7%94%A8FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8FJellyfin%E6%97%B6%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9C%9F%E5%AE%9EIP%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一-frpc服务器上安装Ngnix"><a href="#一-frpc服务器上安装Ngnix" class="headerlink" title="一. frpc服务器上安装Ngnix"></a>一. frpc服务器上安装Ngnix</h3><ol><li>我的是Debian其他自行搜索</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install nginx -y</span><br><span class="line">#启动并设置nginx开机启动</span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><h3 id="二-配置Nginx支持proxy-protocol"><a href="#二-配置Nginx支持proxy-protocol" class="headerlink" title="二. 配置Nginx支持proxy_protocol"></a>二. 配置Nginx支持<code>proxy_protocol</code></h3><ol><li>编辑nginx配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>在http块中添加下面内容</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">       ...#位置随意</span><br><span class="line">       real_ip_header proxy_protocol;</span><br><span class="line">       set_real_ip_from 0.0.0.0/0;  # 允许所有IP</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li>给jellyfin创建一个nginx代理</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/nginx/conf.d/jellyfin.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>添加下面内容</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen 8096 proxy_protocol;  # 监听8096端口并启用proxy_protocol</span><br><span class="line">       server_name _;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://192.168.88.11:8096;  # 转发到Jellyfin服务器</span><br><span class="line">           proxy_set_header Host $host;</span><br><span class="line">           proxy_set_header X-Real-IP $proxy_protocol_addr;  # 获取真实IP</span><br><span class="line">           proxy_set_header X-Forwarded-For $proxy_protocol_addr;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>保存并测试</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">#输出</span><br><span class="line">...................................ok</span><br><span class="line">...................................successful</span><br></pre></td></tr></table></figure><ol start="6"><li>测试成功，重新加载nginx</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure><h3 id="三-配置frpc-toml"><a href="#三-配置frpc-toml" class="headerlink" title="三 .配置frpc.toml"></a>三 .配置frpc.toml</h3><ol><li>nano frpc.toml</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Jellyfin]</span><br><span class="line">type=tcp</span><br><span class="line">remote_port=29080</span><br><span class="line">local_ip=192.168.88.110</span><br><span class="line">local_port=8096</span><br><span class="line">proxy_protocol_version=v2</span><br><span class="line">use_encryption=true</span><br><span class="line">use_compression=true</span><br></pre></td></tr></table></figure><h3 id="四-重启frpc-frps-Jellyfin"><a href="#四-重启frpc-frps-Jellyfin" class="headerlink" title="四 .重启frpc&amp;&amp;frps&amp;&amp;Jellyfin"></a>四 .重启frpc&amp;&amp;frps&amp;&amp;Jellyfin</h3><p>！！！！注意拼写错误，纯手打</p>]]></content>
      
      
      <categories>
          
          <category> frp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生南北多歧路，君向潇湘我向秦</title>
      <link href="/2024/12/30/a/"/>
      <url>/2024/12/30/a/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">人生南北多歧路，君向潇湘我向秦</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>萧瑟秋风今又是，换了人间</title>
      <link href="/2024/12/03/123/"/>
      <url>/2024/12/03/123/</url>
      
        <content type="html"><![CDATA[<h5 id=""><a href="#" class="headerlink" title=""></a></h5><blockquote><p>[毛泽东] - 《<a href="https://baike.baidu.com/item/%E6%B5%AA%E6%B7%98%E6%B2%99%C2%B7%E5%8C%97%E6%88%B4%E6%B2%B3/5958852">浪淘沙·北戴河</a>》</p></blockquote><p> <strong>原文</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大雨落幽燕，白浪滔天，秦皇岛外打鱼船。一片汪洋都不见，知向谁边？</span><br><span class="line">往事越千年，魏武挥鞭，东临碣石有遗篇。萧瑟秋风今又是，换了人间。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单的服务器安全配置脚本</title>
      <link href="/2024/11/24/%E9%80%82%E7%94%A8%E4%BA%8EDebian%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/11/24/%E9%80%82%E7%94%A8%E4%BA%8EDebian%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近老是想买些便宜VPS。每次配置服务器安全都要手挫半天，最后让Claude搓了个脚本，免得冬天手生疮<br>#适用于Debian服务器</p></blockquote><p><img src="https://github.com/user-attachments/assets/6077d526-4756-4ffb-a8c3-f06f29b1d75e" alt="image"></p><hr><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P /root -N --no-check-certificate https://raw.githubusercontent.com/li88iioo/init_server/refs/heads/main/init_server.sh &amp;&amp; <span class="built_in">chmod</span> 700 /root/init_server.sh &amp;&amp; /root/init_server.sh</span><br></pre></td></tr></table></figure><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><ul><li>系统更新与软件安装</li><li>SSH 端口配置与安全加固</li><li>UFW 防火墙配置</li><li>Fail2ban 防暴力破解</li><li>ZeroTier 虚拟网络配置</li><li>Docker 环境配置</li><li>Swap 交换空间管理</li></ul><h3 id="应用安装"><a href="#应用安装" class="headerlink" title="应用安装"></a>应用安装</h3><ul><li>1Panel 面板</li><li>v2ray-agent</li></ul><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><ul><li>系统安全检查</li><li>系统安全加固</li><li>系统资源监控</li><li>网络诊断</li></ul><h2 id="功能详解"><a href="#功能详解" class="headerlink" title="功能详解"></a>功能详解</h2><h3 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h3><ul><li>修改 SSH 端口</li><li>配置 SSH 密钥认证</li><li>SSH 安全加固</li></ul><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><ul><li>UFW 规则管理</li><li>端口开放&#x2F;关闭</li><li>PING 响应控制</li><li>Docker 网络规则配置</li></ul><h3 id="Fail2ban-配置"><a href="#Fail2ban-配置" class="headerlink" title="Fail2ban 配置"></a>Fail2ban 配置</h3><ul><li>SSH 防暴力破解</li><li>自定义封禁规则</li><li>状态监控</li></ul><h3 id="Docker-管理"><a href="#Docker-管理" class="headerlink" title="Docker 管理"></a>Docker 管理</h3><ul><li>Docker 环境安装</li><li>Docker Compose 安装</li><li>容器资源监控</li><li>网络配置</li><li>资源清理</li></ul><h3 id="Swap-管理"><a href="#Swap-管理" class="headerlink" title="Swap 管理"></a>Swap 管理</h3><ul><li>创建&#x2F;调整 Swap 大小</li><li>Swappiness 参数调整</li><li>Swap 删除</li></ul><h3 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h3><ul><li>CPU 使用率</li><li>内存使用情况</li><li>磁盘使用状态</li><li>网络连接状态</li></ul><h3 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h3><ul><li>系统基本信息检查</li><li>开放端口检查</li><li>登录记录审计</li><li>SSH 配置检查</li><li>防火墙状态检查</li></ul><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><ol><li>首次使用建议先运行系统安全检查</li><li>及时更新系统并配置防火墙</li><li>配置 SSH 密钥认证并禁用密码登录</li><li>根据需要调整 Swap 和系统参数</li><li>定期检查系统资源使用情况</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>脚本需要 root 权限运行</li><li>修改 SSH 配置前请确保有其他可用的登录方式</li><li>防火墙配置前请确保已开放必要端口</li><li>建议在配置前备份重要数据</li><li>部分功能可能需要联网下载相关组件</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>Q: 如何备份配置？</strong><br>A: 脚本会自动备份重要的配置文件，备份文件通常带有时间戳后缀。</p><p><strong>Q: 忘记修改后的 SSH 端口？</strong><br>A: 可以在 <code>/etc/ssh/sshd_config</code> 文件中查看。</p><p><strong>Q: 如何恢复被 Fail2ban 封禁的 IP？</strong><br>A: 使用 <code>fail2ban-client set sshd unbanip &lt;IP&gt;</code> 命令。</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下FRP XTCP的配置方法</title>
      <link href="/2024/03/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BFRP%20XTCP%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>/2024/03/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BFRP%20XTCP%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="记录一下FRP-XTCP的配置方法"><a href="#记录一下FRP-XTCP的配置方法" class="headerlink" title="记录一下FRP XTCP的配置方法"></a>记录一下FRP XTCP的配置方法</h2><blockquote><p><strong>什么是xtcp</strong><br>在 FRP（Fast Reverse Proxy）的 XTCP 功能中，<code>frps</code>（FRP<br>服务端）扮演着至关重要的角色，尽管它不直接参与数据的最终传输。XTCP 是一种穿透技术，使得处于不同 NAT<br>或防火墙后的两个网络设备能够建立直接的连接。在这种模式下，<code>frps</code> 的作用主要包括：</p><ol><li><p><strong>中继握手信息</strong>：当两个客户端（通过 <code>frpc</code> 运行）尝试建立 XTCP 连接时，<code>frps</code> 作为中介，负责转发这两个客户端之间的握手信息。这是建立 P2P（点对点）连接的先决条件，因为大多数客户端都处在 NAT<br>或防火墙后面，无法直接发现对方或建立连接。</p></li><li><p><strong>协助穿透 NAT</strong>：在 XTCP 的握手过程中，<code>frps</code> 会帮助两端的 <code>frpc</code> 客户端交换必要的信息（如公网 IP 地址和端口），这些信息是实现 NAT 穿透的关键。通过这种方式，即便客户端位于复杂的网络环境中，也能够尝试直接相互连接。</p></li><li><p><strong>回退到中继传输（可选）</strong>：在某些情况下，比如当 NAT 类型特别严格或环境复杂到阻碍了直接的 P2P 连接时，<code>frps</code> 可以提供回退方案，即通过服务器中继来传输数据。虽然这增加了延迟并需要更多的服务器带宽，但它确保了连接的可靠性。需要注意的是，FRP 的<br>XTCP 功能主要目标是尽量实现直接的 P2P 连接，而不依赖服务器中继传输数据。</p></li><li><p><strong>安全性和访问控制</strong>：<code>frps</code> 还管理着客户端的认证过程，确保只有授权的客户端可以建立连接。此外，它可以对连接进行加密和压缩设置，提高数据传输的安全性和效率。</p></li></ol><p>总之，虽然 <code>frps</code> 在 XTCP<br>模式下的数据传输过程中不直接参与数据的最终传递，但它在建立连接的初期阶段发挥着至关重要的作用，包括但不限于握手信息的中继、帮助实现 NAT<br>穿透、提供回退的中继传输方案以及执行安全性和访问控制。for ChatGPT</p></blockquote><h3 id="1-确认环境要求"><a href="#1-确认环境要求" class="headerlink" title="1. 确认环境要求"></a>1. 确认环境要求</h3><ul><li><p><strong>两个客户端</strong>：确保你有两个处于不同 NAT 或防火墙后的客户端设备，这两个客户端都需要能够访问到 FRP 服务器。</p></li><li><p><strong>一个服务器</strong>：一个可以被上述客户端访问的服务器，用来部署 FRP 服务端。这个服务器需要有固定的公网 IP 或域名。</p></li></ul><blockquote><p>这里我准备了一台内网服务器 <code>&#39; A &#39;</code>，两台公网服务器，含一台优质线路，低宽带低流量 <code>&#39; S &#39; </code>，一台高宽带高流量线路一般的服务器<code>&#39; D &#39;</code>）。实测基本能跑满加宽上行。）</p></blockquote><h3 id="2-安装-FRP"><a href="#2-安装-FRP" class="headerlink" title="2. 安装 FRP"></a>2. 安装 FRP</h3><blockquote><p>frps为服务端，frpc为客户端，安装方法请参考<a href="https://gofrp.org/zh-cn/docs/setup/">安装 | frp (gofrp.org)</a></p></blockquote><p>Docker compose安装示列,包含<code>frps</code>，<code>frpc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  frps:</span><br><span class="line">    image: snowdreamtech/frps</span><br><span class="line">    container_name: frps</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/frps.toml:/etc/frp/frps.toml</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  frpc:</span><br><span class="line">    image: snowdreamtech/frpc</span><br><span class="line">    container_name: frpc</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/frpc.toml:/etc/frp/frpc.toml</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><ul><li><strong>内网服务器</strong> <code>A</code><strong>安装frpc</strong></li><li><strong>公网服务器</strong><code>D</code><strong>安装frpc</strong></li><li><strong>公网服务器</strong><code>S</code><strong>安装frps</strong></li></ul><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h3><p><strong>这里以穿透内网群晖为例</strong><br>下文看不懂可以参考<a href="https://gofrp.org/zh-cn/docs/examples/xtcp/">点对点内网穿透 | frp (gofrp.org)</a></p><h4 id="1-群晖或任意内网设备安装好frpc后，这里称为-被访问者-A"><a href="#1-群晖或任意内网设备安装好frpc后，这里称为-被访问者-A" class="headerlink" title="1.群晖或任意内网设备安装好frpc后，这里称为 被访问者 A"></a>1.群晖或任意内网设备安装好<code>frpc</code>后，这里称为 <em><strong>被访问者</strong></em> A</h4><p>进入你的安装目录配置<code>.toml</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd opt/frpc/data</span><br><span class="line">nano frpc.toml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;1.1.1.1&quot;#服务器 S 的IP地址</span><br><span class="line">serverPort = 7000#服务器 S 的frps端口号，一般为7000</span><br><span class="line">auth.token = &quot;123&quot;#密钥，可选</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;nas-xtcp#名称随意&quot;</span><br><span class="line">type = &quot;xtcp&quot;</span><br><span class="line">secretKey = &quot;123441&quot;#密钥随意</span><br><span class="line">localIP = &quot;192.168.88.2&quot;#群晖内网地址</span><br><span class="line">localPort = 5001#群晖内网端口</span><br></pre></td></tr></table></figure><p><code>ctrl+x</code> <code>y</code>保存.</p><h4 id="2-配置frps服务端-S"><a href="#2-配置frps服务端-S" class="headerlink" title="2.配置frps服务端 S"></a>2.配置<code>frps</code><em><strong>服务端</strong></em> S</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd opt/frps/data#这里是你的安装路径</span><br><span class="line">nano frps.toml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bindPort = 7000</span><br><span class="line">auth.token = &quot;123&quot;密钥</span><br><span class="line"></span><br><span class="line">webServer.addr = &quot;0.0.0.0&quot;</span><br><span class="line">webServer.port = 7500#web面板端口</span><br><span class="line">webServer.user = &quot;admin&quot;web面板账号</span><br><span class="line">webServer.password = &quot;adMin&quot;web面板密码</span><br></pre></td></tr></table></figure><h4 id="3-配置frpc-访问者-D"><a href="#3-配置frpc-访问者-D" class="headerlink" title="3.配置frpc 访问者 D"></a>3.配置<code>frpc</code> <em><strong>访问者</strong></em> D</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd opt/frpc/data</span><br><span class="line">nano frpc.toml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;1.1.1.1&quot;#服务器 S 的IP地址</span><br><span class="line">serverPort = 7000#服务器 S 的frps端口号</span><br><span class="line">auth.token = &quot;123&quot;#密钥</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[visitors]]</span><br><span class="line">name = &quot;p2p_nas_visitor&quot;#这里名字随意</span><br><span class="line">type = &quot;xtcp&quot;</span><br><span class="line"># 要访问的 P2P 代理的名称</span><br><span class="line">serverName = &quot;nas-xtcp&quot;#这里要与***被访问者名字***一致</span><br><span class="line">secretKey = &quot;123441&quot;#这里要与***被访问者密码***一致</span><br><span class="line"># 绑定本地端口以访问 SSH 服务</span><br><span class="line">bindAddr = &quot;127.0.0.1&quot;#你服务器的内网地址，可以不用修改</span><br><span class="line">bindPort = 15001#你服务器未使用的端口</span><br><span class="line"># 如果需要自动保持隧道打开，将其设置为 true</span><br><span class="line">keepTunnelOpen = true</span><br></pre></td></tr></table></figure><p>配置完成后重启下一服务器 <em><strong>s</strong></em> <em><strong>a</strong></em> <em><strong>d</strong></em></p><p>接下来使用<code>D</code>服务器的<strong>IP+15001</strong>就能访问内网群晖了。</p><p>反向代理简单示列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location ^~ / &#123;</span><br><span class="line">    proxy_pass https://127.0.0.1:15001; </span><br><span class="line">    proxy_set_header Host $host; </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr; </span><br><span class="line">    proxy_set_header Upgrade $http_upgrade; </span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;; </span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme; </span><br><span class="line">    proxy_http_version 1.1; </span><br><span class="line">    add_header X-Cache $upstream_cache_status; </span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;; </span><br><span class="line">    add_header Cache-Control no-cache; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下部署Hexo博客在Debian 服务器上的过程</title>
      <link href="/2024/03/08/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BHexo%E9%83%A8%E7%BD%B2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/03/08/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BHexo%E9%83%A8%E7%BD%B2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-更新系统包"><a href="#1-更新系统包" class="headerlink" title="1. 更新系统包"></a>1. 更新系统包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update sudo apt upgrade -y</span><br></pre></td></tr></table></figure><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2. 安装Node.js"></a>2. 安装Node.js</h3><p>这里可以选择随意的版本如21.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3. 安装Git"></a>3. 安装Git</h3><p>Git是管理Hexo博客源码的必需工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git -y</span><br></pre></td></tr></table></figure><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>安装Hexo前，请确保已经安装了Node.js和npm。接下来，使用npm全局安装Hexo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="5-设置Hexo项目"><a href="#5-设置Hexo项目" class="headerlink" title="5. 设置Hexo项目"></a>5. 设置Hexo项目</h3><p>首先，选择一个位置创建你的Hexo项目。然后，使用Hexo命令初始化博客。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/myblog</span><br><span class="line">cd ~/myblog</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="6-配置Hexo"><a href="#6-配置Hexo" class="headerlink" title="6. 配置Hexo"></a>6. 配置Hexo</h3><h4 id="1-编辑项目跟目录下的-config-yml文件来配置Hexo，例如更改主题、修改博客标题、描述等。"><a href="#1-编辑项目跟目录下的-config-yml文件来配置Hexo，例如更改主题、修改博客标题、描述等。" class="headerlink" title="1 编辑项目跟目录下的_config.yml文件来配置Hexo，例如更改主题、修改博客标题、描述等。"></a>1 编辑项目跟目录下的<code>_config.yml</code>文件来配置Hexo，例如更改主题、修改博客标题、描述等。</h4><ul><li><code>title</code>: 网站的标题，将显示在网站的标题栏和其他位置。</li><li><code>subtitle</code>: 网站的副标题，通常用于进一步描述网站的内容或主题。</li><li><code>description</code>: 对网站的简短描述，用于SEO和搜索引擎结果中显示。</li><li><code>keywords</code>: 网站的关键词，用于SEO和搜索引擎优化。</li><li><code>author</code>: 网站的作者或所有者的名称。</li><li><code>language</code>: 网站使用的语言，通常采用ISO 639-1标准的语言代码。</li><li><code>timezone</code>: 网站所在地区的时区，通常采用IANA时区数据库中的时区名称。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timezone: Asia/Shanghai #设置时区</span><br><span class="line">language: zh-CN  #设置语言</span><br></pre></td></tr></table></figure><h4 id="2-创建图片以及文件目录"><a href="#2-创建图片以及文件目录" class="headerlink" title="2 创建图片以及文件目录"></a>2 创建图片以及文件目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/myblog</span><br><span class="line">mkdir images &amp;&amp; mkdir images</span><br></pre></td></tr></table></figure><p>通常，Hexo中的图片可以放在<code>source</code>目录下的任何地方。你可以在<code>source</code>目录下创建一个<code>images</code>文件夹，然后将你的图片放在其中。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source/</span><br><span class="line">└── images/</span><br><span class="line">    ├── image1.jpg</span><br><span class="line">    ├── image2.png</span><br><span class="line">    └── ...</span><br></pre></td></tr></table></figure><p>一旦你将图片放在了<code>source/images</code>目录下，Hexo会自动将其复制到生成的静态网站中的相应位置。你可以在文章或页面中使用相对路径引用这些图片。例如，如果你有一篇文章位于<code>source/_posts</code>目录下，你可以在文章中这样引用图片：</p><p><code>![图片描述](../images/image1.jpg)</code></p><p>这将在文章中插入名为<code>image1.jpg</code>的图片，并将其路径设置为相对于文章所在位置的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source/</span><br><span class="line">└── files/</span><br><span class="line">    ├── file1.pdf</span><br><span class="line">    ├── file2.zip</span><br><span class="line">    └── ...</span><br></pre></td></tr></table></figure><p><code>[文件链接描述](../files/file1.pdf)</code></p><h4 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3 .安装插件"></a>3 .安装插件</h4><p><a href="https://github.com/wzpan/hexo-generator-search">全局搜索</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>根目录配置文件<code>_config.yml</code>（非主题配置文件）下添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">content: true</span><br></pre></td></tr></table></figure><p>站点地图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>根目录配置文件<code>_config.yml</code>（非主题配置文件）下添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure><p><code>http://localhost:4000/sitemap.xml</code></p><h3 id="7-生成站点并预览"><a href="#7-生成站点并预览" class="headerlink" title="7. 生成站点并预览"></a>7. 生成站点并预览</h3><p>在你的Hexo项目目录中，运行以下命令来生成静态文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>然后，启动Hexo服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>默认情况下，这将在<code>http://localhost:4000</code>启动一个本地服务器。由于这是在远程服务器上，你可能需要通过一个具体的IP地址或域名访问它，确保你的防火墙和网络设置允许从外部访问4000端口。</p><h3 id="8-安装主题"><a href="#8-安装主题" class="headerlink" title="8.安装主题"></a>8.安装主题</h3><blockquote><p>这里以<a href="https://github.com/zchengsite/hexo-theme-oranges/blob/master/README-zh.md">orange</a>为列</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/zchengsite/hexo-theme-oranges.git themes/oranges</span><br></pre></td></tr></table></figure><p>在 hexo 博客项目根目录下找到<code>_config.yml</code>文件，修改其中<code>theme</code>字段为主题名<code>oranges</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: oranges</span><br></pre></td></tr></table></figure><p>统计JS目录<code>~/myblog/themes/oranges/layout/_partial/footer.ejs</code><br><strong>更多设置</strong>请参考 <a href="https://github.com/zchengsite/hexo-theme-oranges/blob/master/README-zh.md">OrangeREADME.md</a> </p><h3 id="9-发布文章"><a href="#9-发布文章" class="headerlink" title="9.发布文章"></a>9.发布文章</h3><p><strong>创建新文章</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure><p>或者直接准备好的md文件放入<code>cd ~/myblog/source/_posts</code>中</p><p><strong>添加元数据</strong>（Front-matter）：文章顶部的元数据区域允许你指定关于文章的信息，例如标题、日期、分类和标签。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 2024-03-07 20:00:00</span><br><span class="line">categories: 分类</span><br><span class="line">tags:</span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line">---</span><br><span class="line">....文章正文</span><br></pre></td></tr></table></figure><p>上线文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><h3 id="10-使用PM2来管理Hexo服务器的后台运行"><a href="#10-使用PM2来管理Hexo服务器的后台运行" class="headerlink" title="10 使用PM2来管理Hexo服务器的后台运行"></a>10 使用PM2来管理Hexo服务器的后台运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><p><strong>创建一个<code>js</code>脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">const &#123; exec &#125; = require(&#x27;child_process&#x27;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">// 设置Hexo的根目录</span><br><span class="line"></span><br><span class="line">const hexoRoot = &#x27;~/myblog&#x27;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">// 执行 Hexo 相关命令</span><br><span class="line"></span><br><span class="line">const executeHexoCommands = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">exec(`cd $&#123;hexoRoot&#125; &amp;&amp; hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server`, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">if (error) &#123;</span><br><span class="line"></span><br><span class="line">reject(`执行出错: $&#123;error&#125;`);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(`stdout: $&#123;stdout&#125;`);</span><br><span class="line"></span><br><span class="line">console.error(`stderr: $&#123;stderr&#125;`);</span><br><span class="line"></span><br><span class="line">resolve();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">// 启动Hexo服务器</span><br><span class="line"></span><br><span class="line">const startHexoServer = async () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">await executeHexoCommands();</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Hexo服务器已启动！&#x27;);</span><br><span class="line"></span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line"></span><br><span class="line">console.error(err);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">// 执行脚本</span><br><span class="line"></span><br><span class="line">startHexoServer();</span><br></pre></td></tr></table></figure><p>然后，在Hexo博客的根目录下，使用以下命令启动你的<code>.js</code>脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start run.js --name &quot;hexo-script&quot;</span><br></pre></td></tr></table></figure><p>这将使用PM2启动你的脚本，并将其命名为”hexo-script”（可以选择其他名称）</p><p>之后启动可以使用该命令启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start hexo-script#启动</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop hexo-script#停止</span><br></pre></td></tr></table></figure><p>在系统启动时自动启动这个脚本，可以运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 startup</span><br></pre></td></tr></table></figure><p>按照命令行中给出的指示，执行相应的命令，以便PM2能够在系统启动时自动启动。</p><p>通过这样设置，你的Hexo博客将由PM2管理，你可以轻松地运行你的脚本并确保它在系统重启后自动启动</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单粗暴的给你FPR服务限制地区访问，其他同理</title>
      <link href="/2024/02/07/%E7%AE%80%E5%8D%95%E7%B2%97%E6%9A%B4%E7%9A%84%E7%BB%99%E4%BD%A0FPR%E6%9C%8D%E5%8A%A1%E9%99%90%E5%88%B6%E5%9C%B0%E5%8C%BA%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%85%B6%E4%BB%96%E5%90%8C%E7%90%86/"/>
      <url>/2024/02/07/%E7%AE%80%E5%8D%95%E7%B2%97%E6%9A%B4%E7%9A%84%E7%BB%99%E4%BD%A0FPR%E6%9C%8D%E5%8A%A1%E9%99%90%E5%88%B6%E5%9C%B0%E5%8C%BA%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%85%B6%E4%BB%96%E5%90%8C%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FRP 容器名称</span></span><br><span class="line">CONTAINER_NAME=&quot;frps&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ipinfo.io 的 API 令牌</span></span><br><span class="line">IPINFO_TOKEN=&quot;你的令牌。每个月能免费使用50K额度，基本够了&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目标地区</span></span><br><span class="line">TARGET_REGION=&quot;Sichuan&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓存文件路径</span></span><br><span class="line">CACHE_FILE=&quot;/opt/banIP/ip_region_cache.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数：检查 IP 是否为特殊或保留地址</span></span><br><span class="line">is_special_ip() &#123;</span><br><span class="line">    local ip=$1</span><br><span class="line">    if [[ $ip =~ ^(0\.|127\.|10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1])\.|169\.254\.|::1|fc00::|fe80::) ]]; then</span><br><span class="line">        return 0</span><br><span class="line">    else</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数：从缓存获取 IP 地区</span></span><br><span class="line">get_region_from_cache() &#123;</span><br><span class="line">    local ip=$1</span><br><span class="line">    grep &quot;^$ip,&quot; $CACHE_FILE | cut -d &#x27;,&#x27; -f2</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数：将 IP 地区保存到缓存</span></span><br><span class="line">save_region_to_cache() &#123;</span><br><span class="line">    local ip=$1</span><br><span class="line">    local region=$2</span><br><span class="line">    echo &quot;$ip,$region&quot; &gt;&gt; $CACHE_FILE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">docker logs &quot;$CONTAINER_NAME&quot; 2&gt;&amp;1 | grep -oE &quot;\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b&quot; | sort -u | while read -r ip; do</span><br><span class="line">    if is_special_ip &quot;$ip&quot;; then</span><br><span class="line">        echo &quot;Skipping special or reserved IP: $ip&quot;</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 尝试从缓存获取地区</span><br><span class="line">    region=$(get_region_from_cache &quot;$ip&quot;)</span><br><span class="line">    if [ -z &quot;$region&quot; ]; then</span><br><span class="line">        # 缓存中没有找到，使用API查询</span><br><span class="line">        region=$(curl -s &quot;https://ipinfo.io/$&#123;ip&#125;/region?token=$IPINFO_TOKEN&quot;)</span><br><span class="line">        save_region_to_cache &quot;$ip&quot; &quot;$region&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo &quot;IP: $ip, Region: $region&quot;</span><br><span class="line"></span><br><span class="line">    if [[ &quot;$region&quot; != *&quot;$TARGET_REGION&quot;* ]]; then</span><br><span class="line">        echo &quot;Blocking IP: $ip, as it is not in $TARGET_REGION&quot;</span><br><span class="line">        # 使用 ufw 屏蔽该 IP</span><br><span class="line">        ufw deny from &quot;$ip&quot; to any</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="步骤-1-创建脚本文件"><a href="#步骤-1-创建脚本文件" class="headerlink" title="步骤 1: 创建脚本文件"></a><strong>步骤 1: 创建脚本文件</strong></h2><p>首先，首先创建一个 <code>/opt/banIP</code> 目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/banIP</span><br></pre></td></tr></table></figure><p>然后，创建脚本文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /opt/banIP/block_non_sichuan_ips.sh</span><br></pre></td></tr></table></figure><p>将之前提供的脚本内容粘贴进去，确保替换了 为你的实际 ipinfo.io API 令牌。保存并退出编辑器。</p><p>再创建一个缓存目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /opt/banIP/ip_region_cache.txt</span><br></pre></td></tr></table></figure><p>如果你自定义了目录请注意脚本的中目录是否一致</p><h2 id="步骤2设置一个定时运行"><a href="#步骤2设置一个定时运行" class="headerlink" title="步骤2设置一个定时运行"></a>步骤2设置一个定时运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /opt/banIP/block_non_sichuan_ips.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 * * * * /opt/banIP/block_non_sichuan_ips.sh &gt;&gt; /opt/banIP/block_ips.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><ol><li><p>这条 <code>crontab</code> 配置的意思是：</p><ul><li><p><code>0</code> 分钟时执行，即每个小时的开始。</p></li><li><p><code>* * * *</code> 表示每小时、每天、每月、每周的任何时间。</p></li><li><p><code>/opt/banIP/block_non_sichuan_ips.sh</code> 指定脚本的路径。</p></li><li><p><code>&gt;&gt; /opt/banIP/block_ips.log 2&gt;&amp;1</code> 意味着将标准输出和错误输出都重定向到日志文件。</p></li></ul></li><li><p><strong>保存并退出编辑器</strong>： 保存更改并退出编辑器。<code>crontab</code> 服务会自动加载这个新的定时任务。</p></li></ol><p>注意脚本创建成功后自己执行一次，看是否成功</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Windows上解锁被锁定的Jellyfin用户账户及恢复管理员权限</title>
      <link href="/2024/02/04/%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E4%B8%8A%E8%A7%A3%E9%94%81%E8%A2%AB%E9%94%81%E5%AE%9A%E7%9A%84Jellyfin%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E5%8F%8A%E6%81%A2%E5%A4%8D%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/"/>
      <url>/2024/02/04/%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E4%B8%8A%E8%A7%A3%E9%94%81%E8%A2%AB%E9%94%81%E5%AE%9A%E7%9A%84Jellyfin%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E5%8F%8A%E6%81%A2%E5%A4%8D%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h3 id="在Windows上解锁被Jellyfin锁定的账户及恢复管理员权限"><a href="#在Windows上解锁被Jellyfin锁定的账户及恢复管理员权限" class="headerlink" title="在Windows上解锁被Jellyfin锁定的账户及恢复管理员权限"></a>在Windows上解锁被Jellyfin锁定的账户及恢复管理员权限</h3><p>如果你也是鱼的记忆，输错Jellyfin密码导致被锁这个方案能帮到你</p><hr><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ul><li>确保您的Windows系统已经安装了<code>sqlite3</code>。如果没有，请下载SQLite二进制文件，并将其放在如<code>C:\\sqlite3\\</code>的目录下。</li></ul><h2 id="解锁账户的步骤"><a href="#解锁账户的步骤" class="headerlink" title="解锁账户的步骤"></a>解锁账户的步骤</h2><p>如果解锁用户名为<code>123</code>：</p><ol><li><p>打开命令提示符（CMD）。</p></li><li><p>导航至包含Jellyfin数据库的目录：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\\ProgramData\\Jellyfin\\Server\\data</span><br></pre></td></tr></table></figure><ol start="3"><li>使用位于<code>C:\\sqlite3</code>的SQLite3工具打开数据库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\\sqlite3\\sqlite3.exe jellyfin.db</span><br></pre></td></tr></table></figure><ol start="4"><li>在SQLite命令行中，执行以下SQL查询解锁<code>123</code>账户：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Users <span class="keyword">SET</span> InvalidLoginAttemptCount <span class="operator">=</span> <span class="number">0</span> <span class="keyword">WHERE</span> Username <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> Permissions <span class="keyword">SET</span> <span class="keyword">Value</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">WHERE</span> Kind <span class="operator">=</span> <span class="number">2</span> <span class="keyword">AND</span> UserId <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Id <span class="keyword">FROM</span> Users <span class="keyword">WHERE</span> Username <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure><p>输入后重置<code>123</code>的无效登录尝试计数，并解锁账户。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jellyfin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下Nginx Proxy Manager设置负载均衡的方法</title>
      <link href="/2024/01/26/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BNginx-Proxy-Manager%E8%AE%BE%E7%BD%AE%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/26/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BNginx-Proxy-Manager%E8%AE%BE%E7%BD%AE%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>docker安装好NPM后，<br>进入安装目录&#x2F;npm&#x2F;date&#x2F;nginx<br>创建<code>custom/http.conf</code><br>如<code>/opt/docker/npm/data/nginx/custom/http.conf</code></p><p><code>http.conf</code>配置范本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">upstream 2fa &#123;</span><br><span class="line">    server 你的服务器IP:应用端口;</span><br><span class="line">    server 1.1.1.1:120;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream jellyfin &#123;</span><br><span class="line">    server 2.2.2.2:18096;</span><br><span class="line">    server 3.3.3.3:18096;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream pcisur &#123;</span><br><span class="line">    server 4.4.4.4:28003;</span><br><span class="line">    server 5.5.5.5:28003;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream song &#123;</span><br><span class="line">    server 6.6.6.6:14533;</span><br><span class="line">    server 7.7.7.7:14533;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上2fa,jellyfin….为应用名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream 2fa &#123;</span><br><span class="line">    server 149.104.22.155:18120 weight=3;</span><br><span class="line">    server 103.30.77.177:18120 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是给服务器配置权重，这种配置在某种程度上可以作为优先级的代理：具有更高权重的服务器会处理更多的请求。但请注意，这并不保证第一个服务器总是被优先选择。当第一个服务器忙碌或达到其负载容量时，新的请求仍然可能被路由到权重较低的服务器</p><p>接下来进入NPM后台</p><p><img src="https://cloudflare.free-img.ososo.org/file/1732423594241_%E6%88%AA%E5%9B%BE%202024-01-26%2016-22-08.png" alt="截图 2024-01-26 16-22-08.png"></p><p>如图所示填写你的域名，服务器IP，<strong>端口号HTTP都填写80,HTTPS都填写443</strong></p><p>点击高级设置</p><p><img src="https://cloudflare.free-img.ososo.org/file/1732423690347_%E6%88%AA%E5%9B%BE%202024-01-26%2016-25-37.png" alt="截图 2024-01-26 16-25-37.png"></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://2fa;#2fa为你刚才编辑的http.conf里面的应用民称</span><br><span class="line">    # 80端口用http://2fa;443端口用https://2fa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://2fa;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后就设置成功了</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx Proxy Manager </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始，ALL-IN-ONE ，GPT使用从未如此简单</title>
      <link href="/2023/12/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8CALL-IN-ONE%20%EF%BC%8CGPT%E4%BD%BF%E7%94%A8%E4%BB%8E%E6%9C%AA%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95/"/>
      <url>/2023/12/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8CALL-IN-ONE%20%EF%BC%8CGPT%E4%BD%BF%E7%94%A8%E4%BB%8E%E6%9C%AA%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>太过远古，本教程考古把</th></tr></thead></table><blockquote><p>部署环境：<br>系统：debian11<br> 一个半年以上的GitHub账号 </p></blockquote><p>本文涉及4个开源项目：</p><blockquote><p>NPM:<a href="https://github.com/NginxProxyManager/nginx-proxy-manager">NginxProxyManager&#x2F;nginx-proxy-manager</a><br>pandora-next:<a href="https://github.com/pandora-next/deploy">pandora-next&#x2F;deploy</a><br>PandoraNext-TokensTool:<a href="https://github.com/Yanyutin753/PandoraNext-TokensTool">Yanyutin753&#x2F;PandoraNext-TokensTool</a><br>ChatGPT-Next-Web:<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">Yidadaa&#x2F;ChatGPT-Next-Web</a></p></blockquote><p>如果觉得好用的话，请关注，star一下这些爱发电的作者！！！</p><h3 id="1：先更新一下系统"><a href="#1：先更新一下系统" class="headerlink" title="1：先更新一下系统"></a>1：先更新一下系统</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apt update &amp;&amp; apt upgrade -y</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2：安装docker"><a href="#2：安装docker" class="headerlink" title="2：安装docker"></a>2：安装docker</h3><h4 id="①：提供四个安装脚本"><a href="#①：提供四个安装脚本" class="headerlink" title="①：提供四个安装脚本"></a>①：提供四个安装脚本</h4><ul><li>官方：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><ul><li>DaoCloud 的安装脚本（推荐）:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><ul><li>阿里云的安装脚本:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></pre></td></tr></table></figure><ul><li>推荐使用:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh)</span><br></pre></td></tr></table></figure><p>验证一下docker安装是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h4 id="②：安装-Docker-Compose"><a href="#②：安装-Docker-Compose" class="headerlink" title="②：安装 Docker Compose"></a>②：安装 Docker Compose</h4><p>请确保你的端口没有被占用<br>在 GitHub 上获取最新版本的 Docker Compose：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>赋予执行权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果需要使用非 sudo 用户执行 Docker Compose 命令，可以将该用户添加到 docker 组中。</p><p>验证安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="3：创建安装目录"><a href="#3：创建安装目录" class="headerlink" title="3：创建安装目录"></a>3：创建安装目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/docker/chat</span><br></pre></td></tr></table></figure><p>拉取config文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /opt/docker/chat/data/config.json https://raw.githubusercontent.com/pandora-next/deploy/master/data/config.json</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;bind&quot;: &quot;0.0.0.0:8181&quot;,</span><br><span class="line">  &quot;tls&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false,</span><br><span class="line">    &quot;cert_file&quot;: &quot;&quot;,</span><br><span class="line">    &quot;key_file&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeout&quot;: 600,</span><br><span class="line">  &quot;proxy_url&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license_id&quot;: &quot;&quot;,  # 一定要填写，获取地址：https://dash.pandoranext.com/</span><br><span class="line">  &quot;public_share&quot;: false,</span><br><span class="line">  &quot;site_password&quot;: &quot;&quot;,</span><br><span class="line">  &quot;setup_password&quot;: &quot;&quot;,</span><br><span class="line">  &quot;server_tokens&quot;: true,</span><br><span class="line">  &quot;proxy_api_prefix&quot;: &quot;&quot;,</span><br><span class="line">  &quot;isolated_conv_title&quot;: &quot;*&quot;,</span><br><span class="line">  &quot;whitelist&quot;: null</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>license_id获取地址<a href="https://dash.pandoranext.com/">https://dash.pandoranext.com/</a></p><p>如果提示错误,安装一下 wget 和 curl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wget &amp;&amp; sudo apt install curl</span><br></pre></td></tr></table></figure><h3 id="4：-创建docker-compose-yml文件"><a href="#4：-创建docker-compose-yml文件" class="headerlink" title="4： 创建docker-compose.yml文件"></a>4： 创建docker-compose.yml文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  pandora-next:</span><br><span class="line">    image: pengzhile/pandora-next</span><br><span class="line">    container_name: PandoraNext</span><br><span class="line">    network_mode: bridge</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8181:8181&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">      - ./sessions:/root/.cache/PandoraNext</span><br><span class="line"></span><br><span class="line">  tokensTool:</span><br><span class="line">    image: yangclivia/tokenstool:latest</span><br><span class="line">    container_name: tokensTool</span><br><span class="line">    restart: always</span><br><span class="line">    user: root</span><br><span class="line">    network_mode: host</span><br><span class="line">    pid: host</span><br><span class="line">    privileged: true</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">    command:</span><br><span class="line">      - --deployWay=(部署方式看环境变量)</span><br><span class="line">      - --deployPosition=/data</span><br><span class="line">      - --hotReload=true</span><br><span class="line">      - --server.port=8081</span><br><span class="line">      - --pandoara_Ip=127.0.0.1</span><br><span class="line"></span><br><span class="line">  chatgpt-next-web:</span><br><span class="line">    image: yidadaa/chatgpt-next-web</span><br><span class="line">    container_name: ChatGPTNextWeb</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8090:3000&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - OPENAI_API_KEY=sk-xxxx  # 填写你的 API KEY</span><br><span class="line">      - CODE=your-password      # 设置访问密码，防止 API Key 被滥用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8081#可以先检测一下端口是否被占用 lsof -i:端口号</span><br></pre></td></tr></table></figure><p>按住键盘<code>Ctrl+x</code> ，输入Y保存</p><h4 id="docker-compose-up-d启动容器，"><a href="#docker-compose-up-d启动容器，" class="headerlink" title="docker compose up -d启动容器，"></a><code>docker compose up -d</code>启动容器，</h4><h3 id="如果你不使用-Chat2API，请跳过这一步。"><a href="#如果你不使用-Chat2API，请跳过这一步。" class="headerlink" title="如果你不使用 Chat2API，请跳过这一步。"></a>如果你不使用 Chat2API，请跳过这一步。</h3><p>首先访问tokensTool：输入你的服务器<code>IP:8081</code>进入后台</p><p>默认账号为：<code>root</code>，密码为<code>123456</code>，</p><p>如果提示错误请检查<code>cat /opt/docker/chat/data/config.json</code>文件内是否有内容，如果没有请创建 <code>nano /opt/docker/chat/data/config.json</code> ,复制上面的config配置</p><p>进入tokensTool请修改默认账号密码，图上面很详细了，不懂请反复观看<br><img src="https://cloudflare.free-img.ososo.org/file/1732426247269_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-12%20040347.png" alt="输入图片说明"><br>点击+号添加你的openai账号,示列如图<br><img src="https://cloudflare.free-img.ososo.org/file/1732426237386_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-12%20040752.png" alt="输入图片说明"></p><p>这里获取一次token占用100 license_id 额度</p><blockquote><p>这个容器能实现openai账号密码获取pool_token、share_token和access_token</p></blockquote><h3 id="5：-接下来我们输入ip-8181访问Pandora，如果配置了访问密码。请输入你的密码！！！"><a href="#5：-接下来我们输入ip-8181访问Pandora，如果配置了访问密码。请输入你的密码！！！" class="headerlink" title="5： 接下来我们输入ip:8181访问Pandora，如果配置了访问密码。请输入你的密码！！！"></a>5： 接下来我们输入<code>ip:8181</code>访问Pandora，如果配置了访问密码。请输入你的密码！！！</h3><p><img src="https://cloudflare.free-img.ososo.org/file/1732426235930_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-12%20041243.png" alt="输入图片说明"><br>到了这一步，如果你还没有openai账号可以点击页面<code>Sign up</code>注册你的open账号，最好用Google或微软邮箱，</p><p>获取到的验证链接不要点进去！！！！直接右键复制链接<br><img src="https://cloudflare.free-img.ososo.org/file/1732426242218_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-12%20041648.png" alt="输入图片说明"><br>这样你就免代理获得了一个openai账号<br><img src="https://cloudflare.free-img.ososo.org/file/1732426244897_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-12%20041931.png" alt="输入图片说明"></p><h3 id="6：下面讲一下ChatGPT-Next-Web的设置"><a href="#6：下面讲一下ChatGPT-Next-Web的设置" class="headerlink" title="6：下面讲一下ChatGPT-Next-Web的设置"></a>6：下面讲一下ChatGPT-Next-Web的设置</h3><p>输入<code>ip:8090</code>进入ChatGPT-Next-Web</p><p>如果提示输入 密码跟 token 随便输一下，可以不用管他</p><p>接下来点击左下角设置图标如图设置<br><img src="https://cloudflare.free-img.ososo.org/file/1732426247275_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-12%20042447.png" alt="输入图片说明"><br><img src="https://cloudflare.free-img.ososo.org/file/1732426239546_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-12%20042731.png" alt="输入图片说明"><br>配置完成后就能跟Openai畅聊了</p><p><strong>！！！注意这个一个聊天占用4个license_id 额度，如果额度紧张的话就只用Pandora网页即可。一个指令，占用1个额度。</strong></p><h3 id="如果你还想使用域名访问，可以docker安装NPM"><a href="#如果你还想使用域名访问，可以docker安装NPM" class="headerlink" title="如果你还想使用域名访问，可以docker安装NPM"></a>如果你还想使用域名访问，可以docker安装NPM</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/docker/npm</span><br><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">app:</span><br><span class="line">image: &#x27;jc21/nginx-proxy-manager:latest&#x27;</span><br><span class="line">restart: unless-stopped</span><br><span class="line">ports:</span><br><span class="line">- &#x27;80:80&#x27; # 冒号左边可以改成自己服务器未被占用的端口</span><br><span class="line">- &#x27;81:81&#x27; # 冒号左边可以改成自己服务器未被占用的端口</span><br><span class="line">- &#x27;443:443&#x27; # 冒号左边可以改成自己服务器未被占用的端口</span><br><span class="line">volumes:</span><br><span class="line">- ./data:/data # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中</span><br><span class="line">- ./letsencrypt:/etc/letsencrypt # 冒号左边可以改路径，现在是表示把数据存</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><strong>请确保你的端口没有被占用</strong></p><p>输入你的<code>ip:81</code>访问npm后台</p><p>默认账号密码</p><p><code>Email: admin@example.com Password: changeme</code></p><p>进入后台后请及时修改账号，密码。其他设置还不懂请自行百度，或者问GPT。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源AI人脸替换工具离线版V3.0 整合包</title>
      <link href="/2023/10/30/%E5%BC%80%E6%BA%90AI%E4%BA%BA%E8%84%B8%E6%9B%BF%E6%8D%A2%E5%B7%A5%E5%85%B7%E7%A6%BB%E7%BA%BF%E7%89%88V3.0%20%E6%95%B4%E5%90%88%E5%8C%85/"/>
      <url>/2023/10/30/%E5%BC%80%E6%BA%90AI%E4%BA%BA%E8%84%B8%E6%9B%BF%E6%8D%A2%E5%B7%A5%E5%85%B7%E7%A6%BB%E7%BA%BF%E7%89%88V3.0%20%E6%95%B4%E5%90%88%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cloudflare.free-img.ososo.org/file/1732424036332_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-30%20155833.png" alt="屏幕截图 2023-10-30 155833.png"></p><p><img src="https://cloudflare.free-img.ososo.org/file/1732424040558_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-30%20195951.png" alt="屏幕截图 2023-10-30 195951.png"><br>无需配置任何环境，解压后即可使用，只需一张人脸图片，就可以把视频中的人脸换成你需要人物。无任何使用门槛，支持CPU和GPU解码！</p><p><img src="https://cloudflare.free-img.ososo.org/file/1732424157095_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-30%20200005.png" alt="屏幕截图 2023-10-30 200005.png"><br>开源项目：【<a href="https://github.com/s0md3v/roop">GitHub</a>】</p><p>软件作者：<a href="https://space.bilibili.com/4228235">https://space.bilibili.com/4228235</a></p><p>下载地址：</p><p>迅雷云盘：<a href="https://pan.xunlei.com/s/VNhzaKoCNgvPBXPcP0_GmFdZA1">https://pan.xunlei.com/s/VNhzaKoCNgvPBXPcP0_GmFdZA1</a></p><p>提取码：<code>rz8k</code></p>]]></content>
      
      
      <categories>
          
          <category> ai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中年生活的信息终结者：Docker 部署 RSS服务重塑信息典雅</title>
      <link href="/2023/10/17/%E4%B8%AD%E5%B9%B4%E7%94%9F%E6%B4%BB%E7%9A%84%E4%BF%A1%E6%81%AF%E7%BB%88%E7%BB%93%E8%80%85%EF%BC%9ADocker%20%E9%83%A8%E7%BD%B2%20RSS%E6%9C%8D%E5%8A%A1%E9%87%8D%E5%A1%91%E4%BF%A1%E6%81%AF%E5%85%B8%E9%9B%85/"/>
      <url>/2023/10/17/%E4%B8%AD%E5%B9%B4%E7%94%9F%E6%B4%BB%E7%9A%84%E4%BF%A1%E6%81%AF%E7%BB%88%E7%BB%93%E8%80%85%EF%BC%9ADocker%20%E9%83%A8%E7%BD%B2%20RSS%E6%9C%8D%E5%8A%A1%E9%87%8D%E5%A1%91%E4%BF%A1%E6%81%AF%E5%85%B8%E9%9B%85/</url>
      
        <content type="html"><![CDATA[<p>中年人的 RSS服务器 Docker 部署指南</p><blockquote><p>在当今信息爆炸的时代，我们中年人常常陷入信息过载的困境。社交媒体、新闻网站、博客和论坛，无处不在的信息源涌入我们的生活。然而，与此同时，我们也面临着信息过载的问题，很难从这海量信息中筛选出真正有价值的内容。这就是通常被戏称为“信息阳痿”的困扰。</p><p>幸运的是，自托管RSS阅读器，可以帮助我们解决这个问题。而且，通过使用Docker容器化技术，我们能够轻松地部署和管理RSS，为的信息管理提供了全新的解决方案。</p></blockquote><h1 id="TinyTinyRSS-FreshRSS简介"><a href="#TinyTinyRSS-FreshRSS简介" class="headerlink" title="TinyTinyRSS&amp;&amp;FreshRSS简介"></a>TinyTinyRSS&amp;&amp;FreshRSS简介</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote><p><a href="https://tt-rss.org/">TinyTinyRSS</a>&amp;&amp;<a href="https://freshrss.org/">FreshRSS</a>是一个开源的自托管RSS阅读器，它可以帮助你订阅你喜爱的博客、新闻网站和其他信息源。与传统的社交媒体不同，RSS阅读器让你完全掌握信息源，避免了算法过滤和信息泛滥。你可以根据自己的兴趣订阅各种源，将信息集中在一个平台上进行阅读。</p></blockquote><p><img src="https://cloudflare.free-img.ososo.org/file/1732424248250_image-ahtz.png" alt="image-ahtz.png"></p><p><img src="https://cloudflare.free-img.ososo.org/file/1732424249234_image-znda.png" alt="image-znda.png"></p><hr><h2 id="ttrss部署"><a href="#ttrss部署" class="headerlink" title="ttrss部署"></a>ttrss部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/docker/ttrss</span><br><span class="line">cd /opt/docker/ttrss</span><br><span class="line">nano docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  service.rss:</span><br><span class="line">    image: wangqiru/ttrss:latest</span><br><span class="line">    container_name: ttrss</span><br><span class="line">    ports:</span><br><span class="line">      - 181:80</span><br><span class="line">    environment:</span><br><span class="line">      - SELF_URL_PATH=http://localhost:181/ # please change to your own domain</span><br><span class="line">      - DB_PASS=ttrss # use the same password defined in database.postgres</span><br><span class="line">      - PUID=1000</span><br><span class="line">      - PGID=1000</span><br><span class="line">    volumes:</span><br><span class="line">      - feed-icons:/var/www/feed-icons/</span><br><span class="line">    networks:</span><br><span class="line">      - public_access</span><br><span class="line">      - service_only</span><br><span class="line">      - database_only</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  service.mercury: # set Mercury Parser API endpoint to service.mercury:3000 on TTRSS plugin setting page</span><br><span class="line">    image: wangqiru/mercury-parser-api:latest</span><br><span class="line">    container_name: mercury</span><br><span class="line">    networks:</span><br><span class="line">      - public_access</span><br><span class="line">      - service_only</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  service.opencc: # set OpenCC API endpoint to service.opencc:3000 on TTRSS plugin setting page</span><br><span class="line">    image: wangqiru/opencc-api-server:latest</span><br><span class="line">    container_name: opencc</span><br><span class="line">    environment:</span><br><span class="line">      - NODE_ENV=production</span><br><span class="line">    networks:</span><br><span class="line">      - service_only</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  database.postgres:</span><br><span class="line">    image: postgres:13-alpine</span><br><span class="line">    container_name: postgres</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_PASSWORD=ttrss # feel free to change the password</span><br><span class="line">    volumes:</span><br><span class="line">      - ~/postgres/data/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host</span><br><span class="line">    networks:</span><br><span class="line">      - database_only</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  # utility.watchtower:</span><br><span class="line">  #   container_name: watchtower</span><br><span class="line">  #   image: containrrr/watchtower:latest</span><br><span class="line">  #   volumes:</span><br><span class="line">  #     - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">  #   environment:</span><br><span class="line">  #     - WATCHTOWER_CLEANUP=true</span><br><span class="line">  #     - WATCHTOWER_POLL_INTERVAL=86400</span><br><span class="line">  #   restart: always</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  feed-icons:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  public_access: # Provide the access for ttrss UI</span><br><span class="line">  service_only: # Provide the communication network between services only</span><br><span class="line">    internal: true</span><br><span class="line">  database_only: # Provide the communication between ttrss and database only</span><br><span class="line">    internal: true</span><br></pre></td></tr></table></figure><p>ctrl+x 保存</p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><hr><h2 id="FreshRSS部署"><a href="#FreshRSS部署" class="headerlink" title="FreshRSS部署"></a>FreshRSS部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/docke/frss</span><br><span class="line">cd /opt/docker/ttrss</span><br><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  freshrss-db:</span><br><span class="line">    image: postgres:latest</span><br><span class="line">    container_name: freshrss-db</span><br><span class="line">    hostname: freshrss-db</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    volumes:</span><br><span class="line">      - freshrss-db:/var/lib/postgresql/data</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_USER: freshrss</span><br><span class="line">      POSTGRES_PASSWORD: freshrss</span><br><span class="line">      POSTGRES_DB: freshrss</span><br><span class="line"></span><br><span class="line">  freshrss-app:</span><br><span class="line">    image: freshrss/freshrss:latest</span><br><span class="line">    container_name: freshrss-app</span><br><span class="line">    hostname: freshrss-app</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8088:80&quot;#左边端口号自行修改</span><br><span class="line">    depends_on:</span><br><span class="line">      - freshrss-db</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/var/www/FreshRSS/data</span><br><span class="line">      - ./extensions:/var/www/FreshRSS/extensions</span><br><span class="line">    environment:</span><br><span class="line">      CRON_MIN: &#x27;*/45&#x27;</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  freshrss-db:</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h3 id="一些设置"><a href="#一些设置" class="headerlink" title="一些设置"></a>一些设置</h3><p>一 设置-账户-账户管理-API管理设置密码</p><p>输入“<code>域名/api/</code>”获取第三方客户端登陆地址</p><p>主要有两个</p><p><code>/api/greader.php/</code></p><p><code>/api/fever.php/</code></p><p>二 设置-管理-认证</p><p>勾选API允许API访问</p><p>通过这简单的几步，你就成功地将Tiny Tiny RSS部署在了Docker容器中，为中年人的信息管理带来了新的解决方案。不再被信息泛滥所困扰，你可以更加自由、高效地获取到你想要的信息，让信息自由航行在你的生活中。</p><h1 id="安卓客户端推荐FeedMe"><a href="#安卓客户端推荐FeedMe" class="headerlink" title="安卓客户端推荐FeedMe"></a>安卓客户端推荐<a href="https://github.com/seazon/FeedMe/releases">FeedMe</a></h1><blockquote><p>注</p><p>ttrss地址直接填写服务器地址，fever 地址回报错</p><p>freshrss地址填写&#x2F;api&#x2F;greader.php&#x2F;</p></blockquote><p>RSS源推荐 <a href="RSSHUB.APP">RSSHUB.APP</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成都电信 Openwrt IPTV 设置</title>
      <link href="/2023/10/14/%E6%88%90%E9%83%BD%E7%94%B5%E4%BF%A1%20Openwrt%20IPTV%20%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/10/14/%E6%88%90%E9%83%BD%E7%94%B5%E4%BF%A1%20Openwrt%20IPTV%20%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="OpenWrt-光猫桥接-IPTV-配置教程-udpxy"><a href="#OpenWrt-光猫桥接-IPTV-配置教程-udpxy" class="headerlink" title="OpenWrt 光猫桥接 IPTV 配置教程 (udpxy)"></a>OpenWrt 光猫桥接 IPTV 配置教程 (udpxy)</h2><p>本教程以成都电信 IPTV 为例进行说明。</p><hr><p><strong>准备工作:</strong></p><ul><li>确保光猫已设置为桥接模式</li><li>已经刷入 OpenWrt 系统的路由器。</li><li>安装了 <code>udpxy</code> 插件 (如果未安装，请按照教程指示安装)。</li><li>知道你的 IPTV VLAN ID (本例中为 <code>43</code>)。</li><li>需要知道你的 WAN 口物理设备名称 (例如 <code>eth1</code> 或 <code>eth2</code>)。</li></ul><p><strong>配置步骤:</strong></p><h3 id="一、配置-IPTV-接口-光猫桥接模式"><a href="#一、配置-IPTV-接口-光猫桥接模式" class="headerlink" title="一、配置 IPTV 接口 (光猫桥接模式)"></a>一、配置 IPTV 接口 (光猫桥接模式)</h3><ol><li><p><strong>创建 VLAN (802.1q) 设备:</strong></p><ul><li>打开 OpenWrt 路由器的管理界面，进入 <strong>网络</strong> -&gt; <strong>接口</strong> -&gt; <strong>设备</strong></li><li>点击<strong>添加设备配置</strong></li><li>在弹出的窗口中：<ul><li><strong>设备类型</strong> 选择 <strong>VLAN(802.1q)</strong></li><li><strong>基础设备</strong> 选择 <strong>你的Openwrt跟光猫IPTV口连接的接口</strong></li><li><strong>VLAN ID</strong> 填写 <strong>43</strong></li><li><strong>设备名</strong> 填写 <strong>你的你的Openwrt跟光猫IPTV口连接的接口 如eth1 ，就填写eth1.43</strong></li><li><strong>最后保存</strong></li></ul></li></ul><p><img src="https://cloudflare.free-img.ososo.org/file/1731216718563_image-xngc.png" alt="新建 VLAN (802.1q) 设备"></p></li><li><p><strong>创建 IPTV 接口:</strong></p><ul><li><p>打开 OpenWrt 路由器的管理界面，进入 <strong>网络</strong> -&gt; <strong>接口</strong>。</p></li><li><p>点击 <strong>添加新接口…</strong> 按钮。</p></li><li><p>在弹出的窗口中：</p><ul><li><strong>名称:</strong>  输入你喜欢的接口名称，例如 <code>IPTV</code>。</li><li><strong>协议:</strong>  选择 <strong>静态地址</strong>。</li><li><strong>设备:</strong>  点击 <strong>刚才创建 VLAN (802.1q) 设备-如上 eth1.43</strong>。</li><li>点击 <strong>创建接口</strong> 按钮。</li></ul></li><li><p><strong>接口配置:</strong>  在新建的 <code>IPTV</code> 接口配置页面：</p><ul><li><strong>IPv4 地址:</strong>  随意设置一个内网 IP 地址，例如 <code>192.168.99.1</code>。</li><li><strong>IPv4 子网掩码:</strong>  设置为 <code>255.255.255.0</code>。</li><li><strong>物理设置:</strong>  <strong>设备</strong> 选项应已自动绑定为刚才创建的 VLAN 设备，例如 <code>eth1.43</code>。</li></ul></li></ul><p><img src="https://cloudflare.free-img.ososo.org/file/1731216725307_image-ftgo.png" alt="新建 IPTV 接口"></p></li><li><p><strong>高级设置:</strong></p><ul><li>切换到 <strong>高级设置</strong> 选项卡。</li><li><strong>取消勾选</strong>  <strong>使用默认网关</strong>。</li><li><strong>网关跃点:</strong>  设置为 <code>50</code> (或其他大于 WAN 口跃点的值)。</li><li>其他设置保持默认即可。</li></ul><p><img src="https://cloudflare.free-img.ososo.org/file/1731216717661_image-regz.png" alt="高级设置"></p></li><li><p><strong>防火墙设置:</strong></p><ul><li>切换到 <strong>防火墙设置</strong> 选项卡。</li><li><strong>新建&#x2F;分配防火墙区域:</strong>  选择 <strong>新建</strong>，并在输入框中输入防火墙区域名称，例如 <code>IPTV</code>。</li><li>点击 <strong>保存</strong> 按钮。</li></ul><p><img src="https://cloudflare.free-img.ososo.org/file/1731216716300_image-xvsc.png" alt="防火墙设置"></p></li></ol><h3 id="二、设置-WAN-口网络跃点"><a href="#二、设置-WAN-口网络跃点" class="headerlink" title="二、设置 WAN 口网络跃点"></a>二、设置 WAN 口网络跃点</h3><ol><li><strong>修改 WAN 口跃点:</strong><ul><li>返回 <strong>网络</strong> -&gt; <strong>接口</strong> 页面。</li><li>点击 <strong>WAN</strong> 接口的 <strong>编辑</strong> 按钮。</li><li>切换到 <strong>高级设置</strong> 选项卡。</li><li><strong>网关跃点:</strong>  设置为 <code>20</code> (或任何小于 IPTV 接口跃点的值，例如 <code>30</code>, <code>40</code> 等)。</li><li>点击 <strong>保存 &amp; 应用</strong> 按钮。</li></ul></li></ol><h3 id="三、配置防火墙区域"><a href="#三、配置防火墙区域" class="headerlink" title="三、配置防火墙区域"></a>三、配置防火墙区域</h3><ol><li><p><strong>编辑 IPTV 防火墙区域:</strong></p><ul><li>进入 <strong>网络</strong> -&gt; <strong>防火墙</strong> -&gt; <strong>区域</strong> 页面。</li><li>找到名为 <strong>IPTV</strong> 的防火墙区域，点击 <strong>编辑</strong> 按钮。</li><li>按照下图所示进行设置：</li></ul><p><img src="https://cloudflare.free-img.ososo.org/file/1731216719808_image-wumj.png" alt="防火墙区域设置"></p><ul><li><strong>基本设置:</strong><ul><li><strong>名称:</strong> <code>IPTV</code> (应已自动填写)</li><li><strong>允许来自区域的转发:</strong>  取消勾选所有选项。</li><li><strong>允许转发到区域:</strong>  勾选 <code>wan</code>。</li><li><strong>覆盖默认规则:</strong>  勾选。</li></ul></li><li><strong>高级设置:</strong>  保持默认。</li><li><strong>入站规则:</strong>  <strong>接受</strong>。</li><li><strong>出站规则:</strong>  <strong>接受</strong>。</li><li><strong>转发规则:</strong>  <strong>拒绝</strong>。</li><li><strong>允许转发到目标区域的端口:</strong>  保持为空。</li><li>点击 <strong>保存 &amp; 应用</strong> 按钮。</li></ul></li></ol><h3 id="四、启用和配置-OpenWrt-上的-udpxy-插件"><a href="#四、启用和配置-OpenWrt-上的-udpxy-插件" class="headerlink" title="四、启用和配置 OpenWrt 上的 udpxy 插件"></a>四、启用和配置 OpenWrt 上的 udpxy 插件</h3><ol><li><p><strong>安装 udpxy 插件 (如果尚未安装):</strong></p><ul><li>进入 OpenWrt 路由器的 <strong>系统</strong> -&gt; <strong>软件包</strong> 页面。</li><li>在 <strong>下载并安装软件包</strong> 输入框中输入 <code>udpxy</code>，点击 <strong>确定</strong>。</li><li>等待安装完成。</li></ul></li><li><p><strong>添加 udpxy 配置:</strong></p><ul><li>进入 <strong>网络</strong> -&gt; <strong>Udpxy</strong> 页面。</li><li>点击 <strong>添加</strong> 按钮。</li><li>在弹出的配置页面中：<ul><li><strong>名称:</strong>  自定义配置名称，例如 <code>IPTV_udpxy</code>。</li><li><strong>启用:</strong>  勾选 <strong>启用</strong>。</li><li><strong>绑定地址:</strong>  选择 <code>wan</code> (OpenWrt WAN 口的 IP 地址)。</li><li><strong>绑定端口:</strong>  设置一个端口号，例如 <code>4022</code> 。</li><li><strong>源接口:</strong>  选择之前创建的 IPTV 接口，例如 <code>eth1.43</code>或<strong>直接填写IPTV口的IP</strong>。</li><li>其他设置保持默认即可。</li></ul></li></ul><p><img src="https://cloudflare.free-img.ososo.org/file/1731216717347_image-kkej.png" alt="配置 udpxy"></p></li><li><p><strong>保存并应用配置:</strong>  点击 <strong>保存 &amp; 应用</strong> 按钮。</p></li><li><p><strong>验证 udpxy 状态:</strong></p><ul><li>在浏览器中访问 <code>http://192.168.88.1:4022/status</code> (将 <code>192.168.88.1</code> 替换为 OpenWrt 路由器 IP 地址，<code>4022</code> 替换为你设置的端口号)。</li><li>如果配置正确，页面应该显示类似下图的内容：</li></ul><p><img src="https://cloudflare.free-img.ososo.org/file/1731216718062_image-dsxh.png" alt="udpxy 状态"></p></li></ol><h3 id="五、导入直播地址观看-IPTV"><a href="#五、导入直播地址观看-IPTV" class="headerlink" title="五、导入直播地址观看 IPTV"></a>五、导入直播地址观看 IPTV</h3><ol><li><p><strong>获取直播地址:</strong> </p><ul><li><strong>成都电信 UDP 组播 M3U 列表:</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/imDazui/Tvlist-awesome-m3u-m3u8/master/m3u/%E5%9B%9B%E5%B7%9D%E6%88%90%E9%83%BD%E7%94%B5%E4%BF%A1udp%E7%BB%84%E6%92%AD.m3u</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>修改直播地址格式:</strong>  将 M3U 列表中的 UDP 组播地址修改为 udpxy 可以识别的 HTTP 格式。</p><ul><li><strong>原始 UDP 地址示例:</strong> <code>udp://239.93.0.184:5140</code></li><li><strong>udpxy HTTP 地址格式:</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[OpenWrt 路由器 IP]:[udpxy 端口]/udp/[UDP 组播地址]:[UDP 组播端口]</span><br></pre></td></tr></table></figure></li><li><strong>修改后的 HTTP 地址示例 (假设 OpenWrt IP 为 192.168.88.1，udpxy 端口为 4022):</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.88.1:4022/udp/239.93.0.184:5140</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>导入直播地址:</strong>  将修改后的 HTTP 地址导入到支持 IPTV 的播放器 (例如 VLC, PotPlayer, Kodi 等) 中即可观看 IPTV。</p></li></ol><h3 id="六、配合家庭影音服务器实现异地观看"><a href="#六、配合家庭影音服务器实现异地观看" class="headerlink" title="六、配合家庭影音服务器实现异地观看"></a>六、配合家庭影音服务器实现异地观看</h3><ul><li>通过配置家庭影音服务器 (例如 Jellyfin, Emby, Plex 等)，可以将 udpxy 服务接入，从而实现 IPTV 的异地观看功能。  具体的配置方法自行百度</li></ul><p><img src="https://cloudflare.free-img.ososo.org/file/1731216723840_image-svwx.png" alt="异地观看"></p><hr><p><strong>注意事项:</strong></p><ul><li>本教程以成都电信 IPTV 为例，其他地区的 IPTV 配置可能略有不同，请根据实际情况调整。</li><li>确保光猫已设置为桥接模式。</li><li>确保 OpenWrt 路由器 WAN 口已正确连接到光猫。</li><li>组播地址可能因地区和运营商而异，请使用当地运营商提供的组播地址列表。</li><li>异地观看 IPTV 的效果取决于网络环境和家庭影音服务器的性能。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Openwrt </category>
          
          <category> IPTV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPTV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署SearXNG 搜索引擎，隐私无广告</title>
      <link href="/2023/10/09/Docker%E9%83%A8%E7%BD%B2SearXNG%20%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%8C%E9%9A%90%E7%A7%81%E6%97%A0%E5%B9%BF%E5%91%8A/"/>
      <url>/2023/10/09/Docker%E9%83%A8%E7%BD%B2SearXNG%20%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%8C%E9%9A%90%E7%A7%81%E6%97%A0%E5%B9%BF%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="SearXNG-Docker-部署教程"><a href="#SearXNG-Docker-部署教程" class="headerlink" title="SearXNG Docker 部署教程"></a>SearXNG Docker 部署教程</h2><hr><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>在开始部署之前，请确保已完成以下准备工作：</p><ul><li><strong>Docker 环境:</strong> 需要安装并配置好 Docker 和 Docker Compose。 如果未装 Docker，请跳过此教程。</li><li><strong>域名或 IP 地址:</strong>  需要一个域名或者服务器的 IP 地址用于访问 SearXNG。 如果没有域名，可以使用服务器的 IP 地址加端口号进行访问。</li></ul><h3 id="2-部署-SearXNG"><a href="#2-部署-SearXNG" class="headerlink" title="2. 部署 SearXNG"></a>2. 部署 SearXNG</h3><h4 id="2-1-Docker-Compose-文件准备"><a href="#2-1-Docker-Compose-文件准备" class="headerlink" title="2.1 Docker Compose 文件准备"></a>2.1 Docker Compose 文件准备</h4><ol><li><p><strong>创建目录:</strong>  在服务器上选择一个合适的目录，用于存放 SearXNG 的 Docker Compose 文件和相关配置，例如 <code>/opt/docker/searxng</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/searxng</span><br></pre></td></tr></table></figure></li><li><p><strong>克隆项目并进入目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/searxng/searxng-docker.git /opt/docker/searxng</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/docker/searxng</span><br></pre></td></tr></table></figure></li><li><p><strong>创建 <code>docker-compose.yml</code> 文件:</strong>  在该目录下创建 <code>docker-compose.yml</code> 文件，并将 <strong>以下新内容</strong> 复制粘贴到文件中：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    container_name: redis</span><br><span class="line">    image: docker.io/valkey/valkey:8-alpine</span><br><span class="line">    command: valkey-server --save 30 1 --loglevel warning</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      - searxng</span><br><span class="line">    volumes:</span><br><span class="line">      - valkey-data2:/data</span><br><span class="line">    logging:</span><br><span class="line">      driver: &quot;json-file&quot;</span><br><span class="line">      options:</span><br><span class="line">        max-size: &quot;1m&quot;</span><br><span class="line">        max-file: &quot;1&quot;</span><br><span class="line"></span><br><span class="line">  searxng:</span><br><span class="line">    container_name: searxng</span><br><span class="line">    image: docker.io/searxng/searxng:latest</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      - searxng</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;127.0.0.1:8080:8080&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./searxng:/etc/searxng:rw</span><br><span class="line">    environment:</span><br><span class="line">      - SEARXNG_BASE_URL=https://$&#123;SEARXNG_HOSTNAME:-localhost&#125;/</span><br><span class="line">      - UWSGI_WORKERS=$&#123;SEARXNG_UWSGI_WORKERS:-4&#125;</span><br><span class="line">      - UWSGI_THREADS=$&#123;SEARXNG_UWSGI_THREADS:-4&#125;</span><br><span class="line">    logging:</span><br><span class="line">      driver: &quot;json-file&quot;</span><br><span class="line">      options:</span><br><span class="line">        max-size: &quot;1m&quot;</span><br><span class="line">        max-file: &quot;1&quot;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  searxng:</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  valkey-data2:</span><br></pre></td></tr></table></figure><p>   <strong>文件结构解释:</strong></p><ul><li><strong><code>version: &#39;3.7&#39;</code></strong>:  指定 Docker Compose 文件版本。</li><li><strong><code>services:</code></strong>: 定义要运行的服务。</li><li><strong><code>redis:</code></strong>: 定义 Redis 服务。</li><li><code>container_name: redis</code>:  容器名称为 <code>redis</code>。</li><li><code>image: &quot;redis:alpine&quot;</code>:  使用 <code>redis:alpine</code> 镜像，Alpine 版本镜像体积小巧。</li><li><code>command: redis-server --save &quot;&quot; --appendonly &quot;no&quot;</code>:  Redis 启动命令，禁用数据持久化以简化配置 (适用于缓存场景)。</li><li><code>networks: - searxng</code>:  将 Redis 容器连接到 <code>searxng</code> 网络，以便 SearXNG 容器可以访问 Redis。</li><li><code>tmpfs: - /var/lib/redis</code>:  使用 <code>tmpfs</code> 将 Redis 数据目录挂载到内存中，进一步提升性能，但数据不会持久化。</li><li><code>cap_drop</code> 和 <code>cap_add</code>:  Linux capabilities，用于安全加固，限制容器权限。</li><li><strong><code>searxng:</code></strong>: 定义 SearXNG 服务 (配置与之前版本基本相同)。</li><li><code>container_name: searxng</code>: 容器名称为 <code>searxng</code>。</li><li><code>image: searxng/searxng:latest</code>: 使用最新版 SearXNG 镜像。</li><li><code>networks: - searxng</code>:  连接到 <code>searxng</code> 网络。</li><li><code>ports: - &quot;8180:8080&quot;</code>:  端口映射，将容器 8080 端口映射到宿主机 8180 端口 (可修改)。</li><li><code>volumes: - ./searxng:/etc/searxng:rw</code>:  数据卷挂载，将当前目录下的 <code>searxng</code> 子目录挂载到容器的 <code>/etc/searxng</code> 目录，用于持久化配置。</li><li><code>environment: - SEARXNG_BASE_URL=https://$&#123;SEARXNG_HOSTNAME:-localhost&#125;/</code>:  设置环境变量 <code>SEARXNG_BASE_URL</code>，指定 SearXNG 的基础 URL。</li><li><code>cap_drop</code>, <code>cap_add</code>, <code>logging</code>:  Linux capabilities 和日志配置，与之前版本相同。</li><li><strong><code>networks:</code></strong>: 定义 Docker 网络。</li><li><code>searxng:</code>:  创建一个名为 <code>searxng</code> 的网络。</li><li><code>ipam: driver: default</code>:  使用默认的 IP 地址管理驱动。</li></ul><h4 id="2-2-编辑-env-文件"><a href="#2-2-编辑-env-文件" class="headerlink" title="2.2 编辑 .env 文件"></a>2.2 编辑 <code>.env</code> 文件</h4><ol><li><p><strong>创建 <code>.env</code> 文件:</strong>  在同一目录下创建 <code>.env</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano .<span class="built_in">env</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编辑 <code>.env</code> 文件内容:</strong>  使用文本编辑器打开 <code>.env</code> 文件，并根据需求修改以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SEARXNG_HOSTNAME=search.example.com#修改为你的域名或IP+端口</span><br><span class="line">#LETSENCRYPT_EMAIL=admin@example.com</span><br></pre></td></tr></table></figure><ul><li><strong><code>SEARXNG_HOSTNAME</code></strong>:  将 <code>search.example.com</code> 替换为你的域名或 IP 地址。 如果使用 IP 地址，请确保包含端口号，例如 <code>your_server_ip:8180</code>。</li><li><strong><code>LETSENCRYPT_EMAIL</code></strong>:  如果计划使用 Let’s Encrypt 自动签发 SSL 证书，取消注释此行并填写你的邮箱地址。  <strong>注意：</strong>  Let’s Encrypt 通常需要域名解析到服务器 IP 地址。 本教程简化部署，暂不涉及 HTTPS 配置，可以通过反向代理 (如 Nginx) 实现 HTTPS。</li></ul></li></ol><h4 id="2-3-生成密钥"><a href="#2-3-生成密钥" class="headerlink" title="2.3 生成密钥"></a>2.3 生成密钥</h4><ol><li><p><strong>进入 <code>searxng</code> 目录:</strong>  确保当前在 <code>/opt/docker/searxng</code> 目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/docker/searxng</span><br></pre></td></tr></table></figure></li><li><p><strong>生成随机密钥并替换 <code>settings.yml</code> 文件中的默认密钥:</strong>  运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s|ultrasecretkey|<span class="subst">$(openssl rand -hex 32)</span>|g&quot;</span> searxng/settings.yml</span><br></pre></td></tr></table></figure><p>这个命令会使用 <code>openssl</code> 生成一个 32 位的随机十六进制密钥，并将其替换到 <code>searxng/settings.yml</code> 文件中的 <code>ultrasecretkey</code> 占位符处，作为 SearXNG 的安全密钥。</p></li></ol><h4 id="2-4-配置防火墙-可选"><a href="#2-4-配置防火墙-可选" class="headerlink" title="2.4 配置防火墙 (可选)"></a>2.4 配置防火墙 (可选)</h4><p>如果使用了服务器防火墙或者云服务商提供的安全组，需要在防火墙中添加规则，<strong>允许外部访问在 <code>docker-compose.yml</code> 文件中映射的端口</strong> (默认为 <code>8180</code>)。</p><ul><li><p><strong>服务商控制台:</strong>  如果使用的是云服务器 (如 AWS, Azure, GCP, 阿里云, 腾讯云 等)，通常需要在云服务商的控制台中配置安全组规则，允许入站 TCP 流量访问服务器的 8180 端口。</p></li><li><p><strong>本地防火墙 (如 <code>ufw</code>, <code>firewalld</code>):</strong>  如果在服务器上使用了本地防火墙，例如 <code>ufw</code> 或 <code>firewalld</code>，需要配置防火墙规则允许 8180 端口的入站连接。</p><p><strong>例如，使用 <code>ufw</code> 允许 8180 端口:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ufw allow 8180/tcp</span><br><span class="line"><span class="built_in">sudo</span> ufw reload</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>  防火墙配置是可选的，但为了服务器安全，强烈建议配置防火墙规则，只允许必要的端口对外开放。  如果使用了反向代理 (如 Nginx) 进行端口转发，则需要开放反向代理监听的端口 (通常是 80 或 443)。</p></li></ul><h4 id="2-5-启动-Docker-容器"><a href="#2-5-启动-Docker-容器" class="headerlink" title="2.5 启动 Docker 容器"></a>2.5 启动 Docker 容器</h4><ol><li><p><strong>进入 <code>searxng</code> 目录:</strong>  确保当前在 <code>/opt/docker/searxng</code> 目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/docker/searxng</span><br></pre></td></tr></table></figure></li><li><p><strong>启动 Docker 容器:</strong>  运行以下命令启动 SearXNG 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 参数表示在后台运行容器 (detached mode)。</li><li>Docker Compose 会读取 <code>docker-compose.yml</code> 文件中的配置，下载 SearXNG 镜像并创建和启动容器。</li></ul></li><li><p><strong>等待容器启动:</strong>  Docker 首次启动可能需要一些时间下载镜像。  可以使用以下命令查看容器启动状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><p>当 <code>searxng</code> 服务的状态显示为 <code>Up</code> 时，表示容器已成功启动。</p></li><li><p><strong>访问 SearXNG:</strong>  在浏览器中访问在 <code>.env</code> 文件中配置的域名或 IP 地址和端口号 (例如 <code>http://search.example.com:8180</code> 或 <code>http://your_server_ip:8180</code>)，即可开始使用 SearXNG 搜索引擎。</p></li></ol><h3 id="3-维护-SearXNG"><a href="#3-维护-SearXNG" class="headerlink" title="3. 维护 SearXNG"></a>3. 维护 SearXNG</h3><h4 id="3-1-检测端口占用"><a href="#3-1-检测端口占用" class="headerlink" title="3.1 检测端口占用"></a>3.1 检测端口占用</h4><p>如果在启动 Docker 容器时遇到端口冲突，可以使用以下命令检测 8180 端口是否已被占用：<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8180</span><br></pre></td></tr></table></figure><br>    或<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulnp | grep 8180</span><br></pre></td></tr></table></figure></p><p>如果端口被占用，需要修改 <code>docker-compose.yml</code> 文件中端口映射配置，将宿主机端口 <code>8180</code> 修改为其他未被占用的端口。</p><h4 id="3-2-更新容器"><a href="#3-2-更新容器" class="headerlink" title="3.2 更新容器"></a>3.2 更新容器</h4><p>要更新 SearXNG 容器到最新版本，请执行以下步骤：</p><ol><li><p><strong>进入 <code>searxng</code> 目录:</strong>  确保当前在 <code>/opt/docker/searxng</code> 目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/docker/searxng</span><br></pre></td></tr></table></figure></li><li><p><strong>更新容器:</strong>  运行以下命令更新 SearXNG 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose pull &amp;&amp; docker compose up -d</span><br></pre></td></tr></table></figure><ul><li><code>docker-compose pull</code> 命令会拉取最新的 SearXNG 镜像。</li><li><code>docker-compose up -d</code> 命令会使用新的镜像重新创建并启动容器，实现容器更新。  Docker Compose 会智能地更新容器，而不会丢失数据卷配置。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inter 12代处理器PVE Sriov 流程</title>
      <link href="/2023/10/03/Inter%2012%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8PVE%20Sriov%20%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/10/03/Inter%2012%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8PVE%20Sriov%20%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、PVE安装命令行跳过检测方法："><a href="#一、PVE安装命令行跳过检测方法：" class="headerlink" title="一、PVE安装命令行跳过检测方法："></a>一、PVE安装命令行跳过检测方法：</h2><p>配置文件中创建一个设备描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /usr/share/X11/xorg.conf.d/10-quirks.conf</span><br></pre></td></tr></table></figure><p> 在结尾添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Device&quot;    </span><br><span class="line">    Identifier &quot;Card0&quot;     </span><br><span class="line">    Driver &quot;fbdev&quot;</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><p>ctrl+x  y 回车保存退出</p><p> <code># xinit</code></p><p>回车运行后会进入熟悉的PVE图形化安装界面，安装完成。</p><p> 启动PVE，进入WebUI</p><h2 id="二、PVE换源："><a href="#二、PVE换源：" class="headerlink" title="二、PVE换源："></a>二、PVE换源：</h2><h2 id="1、更换为国内清华源："><a href="#1、更换为国内清华源：" class="headerlink" title="1、更换为国内清华源："></a>1、更换为国内清华源：</h2><p>将自带的源文件sources.list备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list_bak</span><br></pre></td></tr></table></figure><p> 编辑sources.list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>粘贴一下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br></pre></td></tr></table></figure><p>ctrl+x 点y 回车保存退出</p><p>编辑pve企业源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/apt/sources.list.d/pve-enterprise.list</span><br></pre></td></tr></table></figure><blockquote><p>将其中原有的proxmox句首加# 注释掉，变为：#deb <a href="https://enterprise.proxmox.com/debian/pve">https://enterprise.proxmox.com/debian/pve</a> bullseye pve-enterprise</p></blockquote><p>添加以下清华源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bullseye pve-no-subscription</span><br></pre></td></tr></table></figure><p>ctrl+x  y 回车保存退出</p><p>更新并升级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt dist-upgrade -y</span><br></pre></td></tr></table></figure><h2 id="2、LXC更换为清华源："><a href="#2、LXC更换为清华源：" class="headerlink" title="2、LXC更换为清华源："></a>2、LXC更换为清华源：</h2><p><a href="http://备份aplinfo.pm/">备份APLInfo.pm</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/perl5/PVE/APLInfo.pm /usr/share/perl5/PVE/APLInfo.pm_back</span><br></pre></td></tr></table></figure><p>更换为清华源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s|http://download.proxmox.com|https://mirrors.tuna.tsinghua.edu.cn/proxmox|g&#x27; /usr/share/perl5/PVE/APLInfo.pm</span><br></pre></td></tr></table></figure><p>重启服务后生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart pvedaemon.service</span><br></pre></td></tr></table></figure><h2 id="三、升级6-2内核、headers和firmware"><a href="#三、升级6-2内核、headers和firmware" class="headerlink" title="三、升级6.2内核、headers和firmware"></a>三、升级6.2内核、headers和firmware</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y pve-kernel-6.2.11-2-pve pve-headers-6.2.11-2-pve pve-firmware</span><br></pre></td></tr></table></figure><p>重启reboot</p><h2 id="四、编译i915-sriov驱动"><a href="#四、编译i915-sriov驱动" class="headerlink" title="四、编译i915-sriov驱动"></a>四、编译i915-sriov驱动</h2><p>安装工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y build-* git dkms</span><br></pre></td></tr></table></figure><p>拖库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/strongtz/i915-sriov-dkms.git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> cd i915-sriov-dkms</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> nano dkms.conf</span><br></pre></td></tr></table></figure><p>第一行改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE_NAME=&quot;i915-sriov-dkms&quot;</span><br></pre></td></tr></table></figure><p>第二行改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE_VERSION=&quot;6.2&quot;</span><br></pre></td></tr></table></figure><p>ctrl+x  y 回车保存退出</p><p>复制此文件夹到相应目录，开始编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /root/i915-sriov-dkms/ /usr/src/i915-sriov-dkms-6.2</span><br></pre></td></tr></table></figure><p>进入目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/src/i915-sriov-dkms-6.2</span><br></pre></td></tr></table></figure><p>pve7.x执行编译命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkms install -m i915-sriov-dkms -v 6.2</span><br></pre></td></tr></table></figure><p>pve8.0执行编译命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkms install -m i915-sriov-dkms -v 6.2 --force</span><br></pre></td></tr></table></figure><p> 编译完成后检查状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkms status</span><br></pre></td></tr></table></figure><h2 id="五、设置直通和i915guc"><a href="#五、设置直通和i915guc" class="headerlink" title="五、设置直通和i915guc"></a>五、设置直通和i915guc</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/default/grub</span><br></pre></td></tr></table></figure><p>在quiet后添加<code>intel_iommu=on i915.enable_guc=3 i915.max_vfs=7</code></p><blockquote><p>改成GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet intel_iommu&#x3D;on i915.enable_guc&#x3D;3 i915.max_vfs&#x3D;7”</p></blockquote><p>ctrl+x  y 回车保存退出</p><p>顺便把设备直通的其他操作一起做了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/modules</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vfio</span><br><span class="line"></span><br><span class="line">vfio_iommu_type1</span><br><span class="line"></span><br><span class="line">vfio_pci</span><br><span class="line"></span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure><p>更新配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br><span class="line"></span><br><span class="line">update-initramfs -u</span><br></pre></td></tr></table></figure><h2 id="六、安装sysfsutils"><a href="#六、安装sysfsutils" class="headerlink" title="六、安装sysfsutils"></a>六、安装sysfsutils</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y sysfsutils</span><br></pre></td></tr></table></figure><p>添加以下VFs参数，N100建议最高3，可自定义数量，建议按需设置，设置1个时性能最强。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;devices/pci0000:00/0000:00:02.0/sriov_numvfs = 3&quot; &gt; /etc/sysfs.conf</span><br></pre></td></tr></table></figure><p>重启reboot</p><p>lspci检查直通的虚拟显卡，显示如下：</p><p>00:02.0 VGA compatible controller: Intel Corporation Device 46d1（物理核显）</p><p>00:02.1 VGA compatible controller: Intel Corporation Device 46d1（虚拟核显1）</p><p>00:02.2 VGA compatible controller: Intel Corporation Device 46d1（虚拟核显2）</p><p>00:02.3 VGA compatible controller: Intel Corporation Device 46d1（虚拟核显3）</p><p>注意虚拟核显越多，性能越低。只需要1个时，虚拟1个核显即可。就像切西瓜，整体就这么大，人数越多每个人分到的瓜越小。</p><h2 id="七、将虚拟核显添加到虚拟机中，如Win10-11"><a href="#七、将虚拟核显添加到虚拟机中，如Win10-11" class="headerlink" title="七、将虚拟核显添加到虚拟机中，如Win10&#x2F;11"></a>七、将虚拟核显添加到虚拟机中，如Win10&#x2F;11</h2><blockquote><p>硬件内注意事项：</p><p>内存：4GiB （或者更多）</p><p>CPU类别：host （硬解建议给全部核心，比如N100 4cores）</p><p>BIOS：OVMF(UEFI)</p><p>显示：默认标准 核显直通后可改为无(none) *注意选择无(none)时长时间运行会出问题【VM 100 qmp command ‘set_password’ failed - Could not set password】导致虚拟Win死机时，则需改为标准VGA(std)</p><p>机型：pc-q35-7.2</p><p>PCI设备虚拟核显：安装Win时建议不添加，Win装完关机添加虚拟核显时不要勾选主GPU，安装驱动并重启后不报错工作正常后，可以更改为主GPU</p></blockquote><p>Windows虚拟机</p><p>为了提高Win虚拟机的性能，建议安装VirtIO的全部驱动，iso下载地址：</p><p><a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.229-1/virtio-win-0.1.229.iso">https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.229-1/virtio-win-0.1.229.iso</a></p><p>在必须满足虚拟机配置的前提下，安装当前最新的驱动，下面2个，二选一自行测试。</p><p>英特尔® Arc™ 和锐炬® Xe 显卡 - WHQL - Windows* (<a href="http://intel.cn/">intel.cn</a>)</p><p><a href="https://www.intel.cn/content/www/cn/zh/download/726609/intel-arc-iris-xe-graphics-whql-windows.html">https://www.intel.cn/content/www/cn/zh/download/726609/intel-arc-iris-xe-graphics-whql-windows.html</a>?</p><p>英特尔® Arc™ 和锐®炬® Xe 显卡 - BETA - Windows* (<a href="http://intel.cn/">intel.cn</a>)</p><p><a href="https://www.intel.cn/content/www/cn/zh/download/729157/intel-arc-iris-xe-graphics-beta-windows.html">https://www.intel.cn/content/www/cn/zh/download/729157/intel-arc-iris-xe-graphics-beta-windows.html</a></p><p>Linux虚拟机：</p><p>虚拟Ubuntu直通SRIOV核显参照以下“Linux虚拟机”部分</p><p><a href="https://foxi.buduanwang.vip/virtualization/pve/2695.html/">https://foxi.buduanwang.vip/virtualization/pve/2695.html/</a></p><p>虚拟Deiban直通SRIOV核显参照以下“Linux虚拟机使用pve内核–不适用全部情况”</p><p><a href="https://foxi.buduanwang.vip/virtualization/pve/2695.html/">https://foxi.buduanwang.vip/virtualization/pve/2695.html/</a></p><p>英特尔官网核显驱动方法<a href="https://dgpu-docs.intel.com/installation-guides/ubuntu/ubuntu-focal-legacy.html#">https://dgpu-docs.intel.com/installation-guides/ubuntu/ubuntu-focal-legacy.html#</a></p><blockquote><p>参考引用：</p><p><a href="https://github.com/strongtz/i915-sriov-dkms">https://github.com/strongtz/i915-sriov-dkms</a></p><p><a href="https://foxi.buduanwang.vip/virtualization/pve/2695.html/">https://foxi.buduanwang.vip/virtualization/pve/2695.html/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用CloudflareTunnel 上线本地服务，无需备案，公网服务器，白嫖福音</title>
      <link href="/2023/09/21/%E5%88%A9%E7%94%A8Cloudflare%20Tunnel%20%E4%B8%8A%E7%BA%BF%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99%EF%BC%8C%E5%BA%94%E7%94%A8%EF%BC%8C%E6%97%A0%E9%9C%80%E5%A4%87%E6%A1%88%EF%BC%8C%E6%97%A0%E9%9C%80%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E7%99%BD%E5%AB%96%E7%A6%8F%E9%9F%B3/"/>
      <url>/2023/09/21/%E5%88%A9%E7%94%A8Cloudflare%20Tunnel%20%E4%B8%8A%E7%BA%BF%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99%EF%BC%8C%E5%BA%94%E7%94%A8%EF%BC%8C%E6%97%A0%E9%9C%80%E5%A4%87%E6%A1%88%EF%BC%8C%E6%97%A0%E9%9C%80%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E7%99%BD%E5%AB%96%E7%A6%8F%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ol><li>一个解析到cloud flare的域名 （教程请自行搜索）</li><li>一张外币信用卡或者 PayPal<br><del>推荐一个虚拟信用卡 <a href="https://card.onekey.so/?i=ZEIPBH">Onekey</a></del></li></ol></blockquote><h3 id="1-开通-CloudFlare-Tunnel"><a href="#1-开通-CloudFlare-Tunnel" class="headerlink" title="1. 开通 CloudFlare Tunnel"></a>1. <strong>开通</strong> <a href="https://one.dash.cloudflare.com/"><strong>CloudFlare Tunnel</strong></a></h3><p><img src="https://cloudflare.free-img.ososo.org/file/1732424604409_image-uvix.png"></p><h3 id="2-绑定一个支付方式，选择免费套餐，只做验证不会扣款"><a href="#2-绑定一个支付方式，选择免费套餐，只做验证不会扣款" class="headerlink" title="2. 绑定一个支付方式，选择免费套餐，只做验证不会扣款"></a>2. 绑定一个支付方式，选择免费套餐，只做验证不会扣款</h3><p><img src="https://cloudflare.free-img.ososo.org/file/1732424733548_image-bdlg.png"></p><h3 id="3-创建Tunnels-隧道"><a href="#3-创建Tunnels-隧道" class="headerlink" title="3. 创建Tunnels 隧道"></a>3. 创建<strong>Tunnels 隧道</strong></h3><p><img src="https://cloudflare.free-img.ososo.org/file/1732424855800_image-etzj.png"><br><img src="https://cloudflare.free-img.ososo.org/file/1732424907922_image-lvmu.png"></p><h3 id="4-选择安装环境"><a href="#4-选择安装环境" class="headerlink" title="4. 选择安装环境"></a>4. 选择安装环境</h3><p><img src="https://cloudflare.free-img.ososo.org/file/1732425031804_image-ctxy.png"></p><h4 id="这里以Docker为演示"><a href="#这里以Docker为演示" class="headerlink" title="这里以Docker为演示"></a>这里以Docker为演示</h4><p><img src="https://cloudflare.free-img.ososo.org/file/1732425110132_image-yxba.png">在安装有<code>docker</code>的主机上执行上面的命令，完成后<strong>Status 显示为健康</strong>即可接着下一步<br><img src="https://cloudflare.free-img.ososo.org/file/1732425233239_image-dqld.png"></p><h3 id="5-上线内网服务"><a href="#5-上线内网服务" class="headerlink" title="5. 上线内网服务"></a>5. 上线内网服务</h3><ol><li><p>选择刚才创建的隧道<br><img src="https://cloudflare.free-img.ososo.org/file/1732425312197_image-guzj.png" alt="image-guzj.png">点击 Add a public * 创建服务</p></li><li><p>填写二级域名以及你本地项目的地址，之后保存即可。<br><img src="https://cloudflare.free-img.ososo.org/file/1732425415007_image-mnie.png"><br> <strong><strong>注意你本地项目的通讯类型</strong> <em><strong>HTTP</strong></em> <em><strong>HTTPS</strong></em></strong></p></li></ol><h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><p><img src="https://cloudflare.free-img.ososo.org/file/1732425556897_image-xtoz.png" alt="image-xtoz.png"></p><blockquote><p>可以利用<code>Access</code>给你的网站添加密码<br><img src="https://cloudflare.free-img.ososo.org/file/1732425688555_image-tdrd.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cloudflare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
